

GNU Macro Assembler for 8 bit devices.       
                                                                                               Fri Oct 15 15:45:25 2021

GNU C Code Generator                                                 
     1                           	processor	FT60F01X
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 09/04/2020 
    24                           ; 
    25                           ; SFR Addresses
    26  0000                     
    27                           	psect	idataBANK0
    28  0000                     __pidataBANK0:	
    29  001B                     _MSCKCON	set	27
    30  0012                     _T2CON	set	18
    31  0011                     _TMR2	set	17
    32  000B                     _INTCON	set	11
    33  0005                     _PORTA	set	5
    34  0001                     _TMR0	set	1
    35  0092                     _TMR2ON	set	146
    36  0061                     _TMR2IF	set	97
    37  005F                     _GIE	set	95
    38  005E                     _PEIE	set	94
    39  005D                     _T0IE	set	93
    40  005A                     _T0IF	set	90
    41  002C                     _PA4	set	44
    42  0095                     _WPUA	set	149
    43  0092                     _PR2	set	146
    44  008F                     _OSCCON	set	143
    45  0085                     _TRISA	set	133
    46  0081                     _OPTION	set	129
    47  0461                     _TMR2IE	set	1121
    48                           
    49                           	psect	cinit
    50  000D                     start_initialization:	
    51                           ; #config settings
    52                           
    53  000D                     __initialization:	
    54                           
    55                           ;initializer for _IRData
    56  000D  30FF               	movlw	255
    57  000E  01C0               	clrf	__pdataBANK0& (0+127)
    58  000F  00C1               	movwf	(__pdataBANK0+1)& (0+127)
    59  0010  3040               	movlw	64
    60  0011  00C2               	movwf	(__pdataBANK0+2)& (0+127)
    61  0012  30BF               	movlw	191
    62  0013  00C3               	movwf	(__pdataBANK0+3)& (0+127)
    63                           
    64                           ; Clear objects allocated to BANK0
    65  0014  01C4               	clrf	__pbssBANK0& (0+127)
    66  0015  01C5               	clrf	(__pbssBANK0+1)& (0+127)
    67  0016  01C6               	clrf	(__pbssBANK0+2)& (0+127)
    68                           
    69                           ; Clear objects allocated to COMMON
    70  0017  01F0               	clrf	__pbssCOMMON& (0+127)
    71  0018  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    72  0019  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    73  001A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    74  001B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    75  001C  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    76  001D  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    77                           
    78                           ; Clear objects allocated to BITCOMMON
    79  001E  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    80  001F                     end_of_initialization:	
    81                           ;End of C runtime variable initialization code
    82                           
    83  001F                     __end_of__initialization:	
    84  001F  0183               	clrf	3
    85  0020  28C3               	ljmp	_main	;jump to C main() function
    86                           
    87                           	psect	bitbssCOMMON
    88  03E8                     __pbitbssCOMMON:	
    89  03E8                     _SendLastBit:	
    90  03E8                     	ds	1
    91                           
    92                           	psect	bssCOMMON
    93  0070                     __pbssCOMMON:	
    94  0070                     _level1:	
    95  0070                     	ds	1
    96  0071                     _level0:	
    97  0071                     	ds	1
    98  0072                     _Sendbit:	
    99  0072                     	ds	1
   100  0073                     _TxTime:	
   101  0073                     	ds	1
   102  0074                     _TxBit:	
   103  0074                     	ds	1
   104  0075                     _IRSendData:	
   105  0075                     	ds	1
   106  0076                     _IRSendStatus:	
   107  0076                     	ds	1
   108                           
   109                           	psect	bssBANK0
   110  0044                     __pbssBANK0:	
   111  0044                     _SYSTime5S:	
   112  0044                     	ds	2
   113  0046                     _SaveLastBit:	
   114  0046                     	ds	1
   115                           
   116                           	psect	dataBANK0
   117  0040                     __pdataBANK0:	
   118  0040                     _IRData:	
   119  0040                     	ds	4
   120                           
   121                           	psect	cstackCOMMON
   122  0077                     __pcstackCOMMON:	
   123  0077                     ?_POWER_INITIAL:	
   124  0077                     ?_TIMER0_INITIAL:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0077                     ?_TIMER2_INITIAL:	
   128                           ; 1 bytes @ 0x0
   129                           
   130  0077                     ?_SendCtrl:	
   131                           ; 1 bytes @ 0x0
   132                           
   133  0077                     ??_SendCtrl:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0077                     ?_ISR:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0077                     ?_main:	
   140                           ; 1 bytes @ 0x0
   141                           
   142                           
   143                           ; 1 bytes @ 0x0
   144  0077                     	ds	3
   145  007A                     ??_ISR:	
   146                           
   147                           ; 1 bytes @ 0x3
   148  007A                     	ds	3
   149                           
   150                           	psect	cstackBANK0
   151  0000                     __pcstackBANK0:	
   152  0000                     ??_POWER_INITIAL:	
   153  0000                     ??_TIMER0_INITIAL:	
   154                           ; 1 bytes @ 0x0
   155                           
   156  0000                     ??_TIMER2_INITIAL:	
   157                           ; 1 bytes @ 0x0
   158                           
   159  0000                     ??_main:	
   160                           ; 1 bytes @ 0x0
   161                           
   162                           
   163                           	psect	maintext
   164  00C3                     __pmaintext:	
   165                           ; 1 bytes @ 0x0
   166 ;;
   167 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   168 ;;
   169 ;; *************** function _main *****************
   170 ;; Defined at:
   171 ;;		line 262 in file "test_60f01x_IR_Send.C"
   172 ;; Parameters:    Size  Location     Type
   173 ;;		None
   174 ;; Auto vars:     Size  Location     Type
   175 ;;		None
   176 ;; Return value:  Size  Location     Type
   177 ;;                  1    wreg      void 
   178 ;; Registers used:
   179 ;;		wreg, status,2, status,0, pclath, cstack
   180 ;; Tracked objects:
   181 ;;		On entry : B00/0
   182 ;;		On exit  : B00/0
   183 ;;		Unchanged: A00/0
   184 ;; Data sizes:     COMMON   BANK0
   185 ;;      Params:         0       0
   186 ;;      Locals:         0       0
   187 ;;      Temps:          0       0
   188 ;;      Totals:         0       0
   189 ;;Total ram usage:        0 bytes
   190 ;; Hardware stack levels required when called:    3
   191 ;; This function calls:
   192 ;;		_POWER_INITIAL
   193 ;;		_TIMER0_INITIAL
   194 ;;		_TIMER2_INITIAL
   195 ;; This function is called by:
   196 ;;		Startup code after reset
   197 ;; This function uses a non-reentrant model
   198 ;;
   199                           
   200                           
   201                           ;psect for function _main
   202  00C3                     _main:	
   203                           
   204                           ;test_60f01x_IR_Send.C: 264: POWER_INITIAL();
   205                           
   206                           ;incstack = 0
   207                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   208  00C3  20E1               	fcall	_POWER_INITIAL
   209                           
   210                           ;test_60f01x_IR_Send.C: 265: TIMER0_INITIAL();
   211  00C4  20EF               	fcall	_TIMER0_INITIAL
   212                           
   213                           ;test_60f01x_IR_Send.C: 266: TIMER2_INITIAL();
   214  00C5  20D3               	fcall	_TIMER2_INITIAL
   215                           
   216                           ;test_60f01x_IR_Send.C: 267: GIE = 1;
   217  00C6  178B               	bsf	11,7	;volatile
   218  00C7                     l1222:	
   219                           
   220                           ;test_60f01x_IR_Send.C: 269: {
   221                           ;test_60f01x_IR_Send.C: 270: if(SYSTime5S >10000)
   222  00C7  3027               	movlw	39
   223  00C8  0245               	subwf	_SYSTime5S+1,w
   224  00C9  3011               	movlw	17
   225  00CA  1903               	skipnz
   226  00CB  0244               	subwf	_SYSTime5S,w
   227  00CC  1C03               	skipc
   228  00CD  28C7               	goto	l1222
   229                           
   230                           ;test_60f01x_IR_Send.C: 271: {
   231                           ;test_60f01x_IR_Send.C: 272: SYSTime5S = 0;
   232  00CE  01C4               	clrf	_SYSTime5S
   233  00CF  01C5               	clrf	_SYSTime5S+1
   234                           
   235                           ;test_60f01x_IR_Send.C: 273: IRSendStatus = 1;
   236  00D0  01F6               	clrf	_IRSendStatus
   237  00D1  0AF6               	incf	_IRSendStatus,f
   238  00D2  28C7               	goto	l1222
   239  00D3                     __end_of_main:	
   240                           
   241                           	psect	text1
   242  00D3                     __ptext1:	
   243 ;; *************** function _TIMER2_INITIAL *****************
   244 ;; Defined at:
   245 ;;		line 95 in file "test_60f01x_IR_Send.C"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2
   254 ;; Tracked objects:
   255 ;;		On entry : B00/0
   256 ;;		On exit  : B00/0
   257 ;;		Unchanged: A00/0
   258 ;; Data sizes:     COMMON   BANK0
   259 ;;      Params:         0       0
   260 ;;      Locals:         0       0
   261 ;;      Temps:          0       0
   262 ;;      Totals:         0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels used:    1
   265 ;; Hardware stack levels required when called:    2
   266 ;; This function calls:
   267 ;;		Nothing
   268 ;; This function is called by:
   269 ;;		_main
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           
   274                           ;psect for function _TIMER2_INITIAL
   275  00D3                     _TIMER2_INITIAL:	
   276                           
   277                           ;test_60f01x_IR_Send.C: 97: T2CON = 0B00011001;
   278                           
   279                           ;incstack = 0
   280                           ; Regs used in _TIMER2_INITIAL: [wreg+status,2]
   281  00D3  3019               	movlw	25
   282  00D4  0092               	movwf	18	;volatile
   283                           
   284                           ;test_60f01x_IR_Send.C: 101: TMR2 = 0;
   285  00D5  0191               	clrf	17	;volatile
   286                           
   287                           ;test_60f01x_IR_Send.C: 102: PR2 = 140;
   288  00D6  308C               	movlw	140
   289  00D7  1683               	bsf	3,5	;RP0=1, select bank1
   290  00D8  0092               	movwf	18	;volatile
   291                           
   292                           ;test_60f01x_IR_Send.C: 104: TMR2IF = 0;
   293  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   294  00DA  108C               	bcf	12,1	;volatile
   295                           
   296                           ;test_60f01x_IR_Send.C: 105: TMR2IE = 1;
   297  00DB  1683               	bsf	3,5	;RP0=1, select bank1
   298  00DC  148C               	bsf	12,1	;volatile
   299                           
   300                           ;test_60f01x_IR_Send.C: 106: TMR2ON = 1;
   301  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   302  00DE  1512               	bsf	18,2	;volatile
   303                           
   304                           ;test_60f01x_IR_Send.C: 107: PEIE=1;
   305  00DF  170B               	bsf	11,6	;volatile
   306  00E0  0008               	return
   307  00E1                     __end_of_TIMER2_INITIAL:	
   308                           
   309                           	psect	text2
   310  00EF                     __ptext2:	
   311 ;; *************** function _TIMER0_INITIAL *****************
   312 ;; Defined at:
   313 ;;		line 78 in file "test_60f01x_IR_Send.C"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;		None
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, status,2
   322 ;; Tracked objects:
   323 ;;		On entry : B00/0
   324 ;;		On exit  : B00/0
   325 ;;		Unchanged: A00/0
   326 ;; Data sizes:     COMMON   BANK0
   327 ;;      Params:         0       0
   328 ;;      Locals:         0       0
   329 ;;      Temps:          0       0
   330 ;;      Totals:         0       0
   331 ;;Total ram usage:        0 bytes
   332 ;; Hardware stack levels used:    1
   333 ;; Hardware stack levels required when called:    2
   334 ;; This function calls:
   335 ;;		Nothing
   336 ;; This function is called by:
   337 ;;		_main
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           
   342                           ;psect for function _TIMER0_INITIAL
   343  00EF                     _TIMER0_INITIAL:	
   344                           
   345                           ;test_60f01x_IR_Send.C: 80: OPTION = 0B00000000;
   346                           
   347                           ;incstack = 0
   348                           ; Regs used in _TIMER0_INITIAL: [wreg+status,2]
   349  00EF  1683               	bsf	3,5	;RP0=1, select bank1
   350  00F0  0181               	clrf	1	;volatile
   351                           
   352                           ;test_60f01x_IR_Send.C: 86: TMR0 = 239;
   353  00F1  30EF               	movlw	239
   354  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   355  00F3  0081               	movwf	1	;volatile
   356                           
   357                           ;test_60f01x_IR_Send.C: 87: T0IF = 0;
   358  00F4  110B               	bcf	11,2	;volatile
   359  00F5  0008               	return
   360  00F6                     __end_of_TIMER0_INITIAL:	
   361                           
   362                           	psect	text3
   363  00E1                     __ptext3:	
   364 ;; *************** function _POWER_INITIAL *****************
   365 ;; Defined at:
   366 ;;		line 55 in file "test_60f01x_IR_Send.C"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2
   375 ;; Tracked objects:
   376 ;;		On entry : B00/0
   377 ;;		On exit  : B00/0
   378 ;;		Unchanged: A00/0
   379 ;; Data sizes:     COMMON   BANK0
   380 ;;      Params:         0       0
   381 ;;      Locals:         0       0
   382 ;;      Temps:          0       0
   383 ;;      Totals:         0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels used:    1
   386 ;; Hardware stack levels required when called:    2
   387 ;; This function calls:
   388 ;;		Nothing
   389 ;; This function is called by:
   390 ;;		_main
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           
   395                           ;psect for function _POWER_INITIAL
   396  00E1                     _POWER_INITIAL:	
   397                           
   398                           ;test_60f01x_IR_Send.C: 57: OSCCON = 0B01110000;
   399                           
   400                           ;incstack = 0
   401                           ; Regs used in _POWER_INITIAL: [wreg+status,2]
   402  00E1  3070               	movlw	112
   403  00E2  1683               	bsf	3,5	;RP0=1, select bank1
   404  00E3  008F               	movwf	15	;volatile
   405                           
   406                           ;test_60f01x_IR_Send.C: 58: INTCON = 0;
   407  00E4  018B               	clrf	11	;volatile
   408                           
   409                           ;test_60f01x_IR_Send.C: 59: OPTION = 0B00001000;
   410  00E5  3008               	movlw	8
   411  00E6  0081               	movwf	1	;volatile
   412                           
   413                           ;test_60f01x_IR_Send.C: 61: PORTA = 0B00000000;
   414  00E7  1283               	bcf	3,5	;RP0=0, select bank0
   415  00E8  0185               	clrf	5	;volatile
   416                           
   417                           ;test_60f01x_IR_Send.C: 62: TRISA = 0B00000000;
   418  00E9  1683               	bsf	3,5	;RP0=1, select bank1
   419  00EA  0185               	clrf	5	;volatile
   420                           
   421                           ;test_60f01x_IR_Send.C: 64: WPUA = 0B00000000;
   422  00EB  0195               	clrf	21	;volatile
   423                           
   424                           ;test_60f01x_IR_Send.C: 65: MSCKCON = 0B00000000;
   425  00EC  1283               	bcf	3,5	;RP0=0, select bank0
   426  00ED  019B               	clrf	27	;volatile
   427  00EE  0008               	return
   428  00EF                     __end_of_POWER_INITIAL:	
   429                           
   430                           	psect	text4
   431  00A4                     __ptext4:	
   432 ;; *************** function _ISR *****************
   433 ;; Defined at:
   434 ;;		line 237 in file "test_60f01x_IR_Send.C"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMMON   BANK0
   448 ;;      Params:         0       0
   449 ;;      Locals:         0       0
   450 ;;      Temps:          3       0
   451 ;;      Totals:         3       0
   452 ;;Total ram usage:        3 bytes
   453 ;; Hardware stack levels used:    1
   454 ;; Hardware stack levels required when called:    1
   455 ;; This function calls:
   456 ;;		_SendCtrl
   457 ;; This function is called by:
   458 ;;		Interrupt level 1
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           
   463                           ;psect for function _ISR
   464  00A4                     _ISR:	
   465                           
   466                           ;test_60f01x_IR_Send.C: 240: if(T0IE && T0IF)
   467  00A4  1A8B               	btfsc	11,5	;volatile
   468  00A5  1D0B               	btfss	11,2	;volatile
   469  00A6  28AD               	goto	i1l1170
   470                           
   471                           ;test_60f01x_IR_Send.C: 241: {
   472                           ;test_60f01x_IR_Send.C: 242: TMR0 = 239;
   473  00A7  30EF               	movlw	239
   474  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   475  00A9  0081               	movwf	1	;volatile
   476                           
   477                           ;test_60f01x_IR_Send.C: 243: T0IF = 0;
   478  00AA  110B               	bcf	11,2	;volatile
   479                           
   480                           ;test_60f01x_IR_Send.C: 244: PA4 = ~PA4;
   481  00AB  3010               	movlw	16
   482  00AC  0685               	xorwf	5,f
   483  00AD                     i1l1170:	
   484                           
   485                           ;test_60f01x_IR_Send.C: 245: }
   486                           ;test_60f01x_IR_Send.C: 248: if(TMR2IE && TMR2IF)
   487  00AD  1683               	bsf	3,5	;RP0=1, select bank1
   488  00AE  1C8C               	btfss	12,1	;volatile
   489  00AF  28BA               	goto	i1l499
   490  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   491  00B1  1C8C               	btfss	12,1	;volatile
   492  00B2  28BA               	goto	i1l499
   493                           
   494                           ;test_60f01x_IR_Send.C: 249: {
   495                           ;test_60f01x_IR_Send.C: 250: TMR2IF = 0;
   496  00B3  108C               	bcf	12,1	;volatile
   497                           
   498                           ;test_60f01x_IR_Send.C: 251: SendCtrl();
   499  00B4  2021               	fcall	_SendCtrl
   500                           
   501                           ;test_60f01x_IR_Send.C: 252: SYSTime5S++;
   502  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   503  00B6  0AC4               	incf	_SYSTime5S,f
   504  00B7  1903               	skipnz
   505  00B8  0AC5               	incf	_SYSTime5S+1,f
   506                           
   507                           ;test_60f01x_IR_Send.C: 253: PA4 = 0;
   508  00B9  1205               	bcf	5,4	;volatile
   509  00BA                     i1l499:	
   510  00BA  087C               	movf	??_ISR+2,w
   511  00BB  008A               	movwf	10
   512  00BC  087B               	movf	??_ISR+1,w
   513  00BD  0084               	movwf	4
   514  00BE  0E7A               	swapf	??_ISR^(0+-128),w
   515  00BF  0083               	movwf	3
   516  00C0  0EFE               	swapf	126,f
   517  00C1  0E7E               	swapf	126,w
   518  00C2  0009               	retfie
   519  00C3                     __end_of_ISR:	
   520                           
   521                           	psect	intentry
   522  0004                     __pintentry:	
   523                           ;incstack = 0
   524                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   525                           
   526  0004                     interrupt_function:	
   527  007E                     saved_w	set	btemp
   528  0004  00FE               	movwf	btemp
   529  0005  0E03               	swapf	3,w
   530  0006  00FA               	movwf	??_ISR
   531  0007  0804               	movf	4,w
   532  0008  00FB               	movwf	??_ISR+1
   533  0009  080A               	movf	10,w
   534  000A  00FC               	movwf	??_ISR+2
   535  000B  28A4               	ljmp	_ISR
   536                           
   537                           	psect	text5
   538  0021                     __ptext5:	
   539 ;; *************** function _SendCtrl *****************
   540 ;; Defined at:
   541 ;;		line 115 in file "test_60f01x_IR_Send.C"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   550 ;; Tracked objects:
   551 ;;		On entry : 100/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0
   555 ;;      Params:         0       0
   556 ;;      Locals:         0       0
   557 ;;      Temps:          3       0
   558 ;;      Totals:         3       0
   559 ;;Total ram usage:        3 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_ISR
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           
   569                           ;psect for function _SendCtrl
   570  0021                     _SendCtrl:	
   571                           
   572                           ;test_60f01x_IR_Send.C: 118: if (IRSendStatus == 0)
   573                           
   574                           ;incstack = 0
   575                           ; Regs used in _SendCtrl: [wreg-fsr0h+status,2+status,0]
   576  0021  0876               	movf	_IRSendStatus,w
   577  0022  1D03               	btfss	3,2
   578  0023  2828               	goto	i1l1070
   579                           
   580                           ;test_60f01x_IR_Send.C: 119: {
   581                           ;test_60f01x_IR_Send.C: 120: T0IE = 0;
   582  0024  128B               	bcf	11,5	;volatile
   583                           
   584                           ;test_60f01x_IR_Send.C: 121: Sendbit = 0;
   585  0025  01F2               	clrf	_Sendbit
   586                           
   587                           ;test_60f01x_IR_Send.C: 122: TxTime = 0;
   588  0026  01F3               	clrf	_TxTime
   589                           
   590                           ;test_60f01x_IR_Send.C: 123: }
   591  0027  0008               	return
   592  0028                     i1l1070:	
   593                           
   594                           ;test_60f01x_IR_Send.C: 124: else if (IRSendStatus == 1)
   595  0028  0B76               	decfsz	_IRSendStatus,w
   596  0029  283F               	goto	i1l1090
   597  002A  3011               	movlw	17
   598                           
   599                           ;test_60f01x_IR_Send.C: 125: {
   600                           ;test_60f01x_IR_Send.C: 126: TxTime++;
   601  002B  0AF3               	incf	_TxTime,f
   602                           
   603                           ;test_60f01x_IR_Send.C: 127: if (TxTime < 17)
   604  002C  0273               	subwf	_TxTime,w
   605  002D  1803               	skipnc
   606  002E  2831               	goto	i1l1078
   607                           
   608                           ;test_60f01x_IR_Send.C: 128: {
   609                           ;test_60f01x_IR_Send.C: 129: T0IE = 1;
   610  002F  168B               	bsf	11,5	;volatile
   611                           
   612                           ;test_60f01x_IR_Send.C: 130: }
   613  0030  283A               	goto	i1l1086
   614  0031                     i1l1078:	
   615                           
   616                           ;test_60f01x_IR_Send.C: 131: else if (TxTime < 24)
   617  0031  3018               	movlw	24
   618  0032  0273               	subwf	_TxTime,w
   619  0033  1803               	skipnc
   620  0034  2837               	goto	i1l1082
   621                           
   622                           ;test_60f01x_IR_Send.C: 132: {
   623                           ;test_60f01x_IR_Send.C: 133: T0IE = 0;
   624  0035  128B               	bcf	11,5	;volatile
   625                           
   626                           ;test_60f01x_IR_Send.C: 134: }
   627  0036  283A               	goto	i1l1086
   628  0037                     i1l1082:	
   629  0037  3002               	movlw	2
   630                           
   631                           ;test_60f01x_IR_Send.C: 135: else
   632                           ;test_60f01x_IR_Send.C: 136: {
   633                           ;test_60f01x_IR_Send.C: 137: TxTime = 0;
   634  0038  01F3               	clrf	_TxTime
   635                           
   636                           ;test_60f01x_IR_Send.C: 138: IRSendStatus = 2;
   637  0039  00F6               	movwf	_IRSendStatus
   638  003A                     i1l1086:	
   639                           
   640                           ;test_60f01x_IR_Send.C: 139: }
   641                           ;test_60f01x_IR_Send.C: 140: IRSendData = IRData[0];
   642  003A  0840               	movf	_IRData,w
   643  003B  00F5               	movwf	_IRSendData
   644                           
   645                           ;test_60f01x_IR_Send.C: 141: TxBit = 0x01;
   646  003C  01F4               	clrf	_TxBit
   647  003D  0AF4               	incf	_TxBit,f
   648                           
   649                           ;test_60f01x_IR_Send.C: 142: }
   650  003E  0008               	return
   651  003F                     i1l1090:	
   652                           
   653                           ;test_60f01x_IR_Send.C: 143: else if(IRSendStatus == 2)
   654  003F  3002               	movlw	2
   655  0040  0676               	xorwf	_IRSendStatus,w
   656  0041  1D03               	btfss	3,2
   657  0042  0008               	return
   658                           
   659                           ;test_60f01x_IR_Send.C: 144: {
   660                           ;test_60f01x_IR_Send.C: 145: if (IRSendData & TxBit)
   661  0043  0875               	movf	_IRSendData,w
   662  0044  0574               	andwf	_TxBit,w
   663  0045  1903               	btfsc	3,2
   664  0046  284C               	goto	i1l471
   665  0047  3003               	movlw	3
   666                           
   667                           ;test_60f01x_IR_Send.C: 146: {
   668                           ;test_60f01x_IR_Send.C: 147: level1 = 1;
   669  0048  01F0               	clrf	_level1
   670  0049  0AF0               	incf	_level1,f
   671                           
   672                           ;test_60f01x_IR_Send.C: 148: level0 = 3;
   673  004A  00F1               	movwf	_level0
   674                           
   675                           ;test_60f01x_IR_Send.C: 150: }
   676  004B  2850               	goto	i1l1098
   677  004C                     i1l471:	
   678                           
   679                           ;test_60f01x_IR_Send.C: 151: else
   680                           ;test_60f01x_IR_Send.C: 152: {
   681                           ;test_60f01x_IR_Send.C: 153: level1 = 1;
   682  004C  01F0               	clrf	_level1
   683  004D  0AF0               	incf	_level1,f
   684                           
   685                           ;test_60f01x_IR_Send.C: 154: level0 = 1;
   686  004E  01F1               	clrf	_level0
   687  004F  0AF1               	incf	_level0,f
   688  0050                     i1l1098:	
   689                           
   690                           ;test_60f01x_IR_Send.C: 155: }
   691                           ;test_60f01x_IR_Send.C: 156: TxTime++;
   692  0050  0AF3               	incf	_TxTime,f
   693                           
   694                           ;test_60f01x_IR_Send.C: 157: if (TxTime <= level1)
   695  0051  0873               	movf	_TxTime,w
   696  0052  0270               	subwf	_level1,w
   697  0053  1C03               	skipc
   698  0054  2857               	goto	i1l1104
   699  0055                     i1l1102:	
   700                           
   701                           ;test_60f01x_IR_Send.C: 158: {
   702                           ;test_60f01x_IR_Send.C: 159: T0IE = 1;
   703  0055  168B               	bsf	11,5	;volatile
   704                           
   705                           ;test_60f01x_IR_Send.C: 160: }
   706  0056  0008               	return
   707  0057                     i1l1104:	
   708                           
   709                           ;test_60f01x_IR_Send.C: 161: else if (TxTime <= (level0+level1))
   710  0057  0871               	movf	_level0,w
   711  0058  0770               	addwf	_level1,w
   712  0059  00F7               	movwf	??_SendCtrl
   713  005A  01F8               	clrf	??_SendCtrl+1
   714  005B  0DF8               	rlf	??_SendCtrl+1,f
   715  005C  0878               	movf	??_SendCtrl+1,w
   716  005D  3A80               	xorlw	128
   717  005E  00F9               	movwf	??_SendCtrl+2
   718  005F  3080               	movlw	128
   719  0060  0279               	subwf	??_SendCtrl+2,w
   720  0061  1D03               	skipz
   721  0062  2865               	goto	u30_25
   722  0063  0873               	movf	_TxTime,w
   723  0064  0277               	subwf	??_SendCtrl,w
   724  0065                     u30_25:	
   725  0065  1C03               	skipc
   726  0066  2869               	goto	i1l1108
   727  0067                     i1l1106:	
   728                           
   729                           ;test_60f01x_IR_Send.C: 162: {
   730                           ;test_60f01x_IR_Send.C: 163: T0IE = 0;
   731  0067  128B               	bcf	11,5	;volatile
   732                           
   733                           ;test_60f01x_IR_Send.C: 164: }
   734  0068  0008               	return
   735  0069                     i1l1108:	
   736                           
   737                           ;test_60f01x_IR_Send.C: 165: else if (Sendbit < 4)
   738  0069  3004               	movlw	4
   739  006A  0272               	subwf	_Sendbit,w
   740  006B  1803               	skipnc
   741  006C  2888               	goto	i1l477
   742                           
   743                           ;test_60f01x_IR_Send.C: 166: {
   744                           ;test_60f01x_IR_Send.C: 167: TxTime = 1;
   745  006D  01F3               	clrf	_TxTime
   746  006E  0AF3               	incf	_TxTime,f
   747                           
   748                           ;test_60f01x_IR_Send.C: 168: T0IE = 1;
   749  006F  168B               	bsf	11,5	;volatile
   750                           
   751                           ;test_60f01x_IR_Send.C: 169: SaveLastBit = IRSendData & TxBit;
   752  0070  0875               	movf	_IRSendData,w
   753  0071  1283               	bcf	3,5	;RP0=0, select bank0
   754  0072  00C6               	movwf	_SaveLastBit
   755  0073  0874               	movf	_TxBit,w
   756  0074  05C6               	andwf	_SaveLastBit,f
   757                           
   758                           ;test_60f01x_IR_Send.C: 170: TxBit <<= 1;
   759  0075  1003               	clrc
   760  0076  0DF4               	rlf	_TxBit,f
   761                           
   762                           ;test_60f01x_IR_Send.C: 171: if (TxBit == 0x00)
   763  0077  0874               	movf	_TxBit,w
   764  0078  1D03               	btfss	3,2
   765  0079  0008               	return
   766                           
   767                           ;test_60f01x_IR_Send.C: 172: {
   768                           ;test_60f01x_IR_Send.C: 173: TxBit = 0x01;
   769  007A  01F4               	clrf	_TxBit
   770  007B  0AF4               	incf	_TxBit,f
   771                           
   772                           ;test_60f01x_IR_Send.C: 174: Sendbit++;
   773  007C  0AF2               	incf	_Sendbit,f
   774                           
   775                           ;test_60f01x_IR_Send.C: 175: IRSendData = IRData[Sendbit];
   776  007D  0872               	movf	_Sendbit,w
   777  007E  3E40               	addlw	(low (_IRData| 0))& (0+255)
   778  007F  0084               	movwf	4
   779  0080  1383               	bcf	3,7	;select IRP bank0
   780  0081  0800               	movf	0,w
   781  0082  00F5               	movwf	_IRSendData
   782                           
   783                           ;test_60f01x_IR_Send.C: 176: if (Sendbit > 3)
   784  0083  3004               	movlw	4
   785  0084  0272               	subwf	_Sendbit,w
   786  0085  1803               	btfsc	3,0
   787                           
   788                           ;test_60f01x_IR_Send.C: 177: {
   789                           ;test_60f01x_IR_Send.C: 178: SendLastBit = 1;
   790  0086  147D               	bsf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   791  0087  0008               	return
   792  0088                     i1l477:	
   793                           
   794                           ;test_60f01x_IR_Send.C: 182: else
   795                           ;test_60f01x_IR_Send.C: 183: {
   796                           ;test_60f01x_IR_Send.C: 184: if(SendLastBit)
   797  0088  1C7D               	btfss	_SendLastBit/(0+8),_SendLastBit& (0+7)
   798  0089  0008               	return
   799                           
   800                           ;test_60f01x_IR_Send.C: 185: {
   801                           ;test_60f01x_IR_Send.C: 186: TxTime++;
   802  008A  0AF3               	incf	_TxTime,f
   803                           
   804                           ;test_60f01x_IR_Send.C: 187: if(SaveLastBit)
   805  008B  1283               	bcf	3,5	;RP0=0, select bank0
   806  008C  0846               	movf	_SaveLastBit,w
   807  008D  1903               	btfsc	3,2
   808  008E  289E               	goto	i1l1148
   809                           
   810                           ;test_60f01x_IR_Send.C: 188: {
   811                           ;test_60f01x_IR_Send.C: 189: if(TxTime < 3)
   812  008F  3003               	movlw	3
   813  0090  0273               	subwf	_TxTime,w
   814  0091  1C03               	btfss	3,0
   815  0092  2867               	goto	i1l1106
   816                           
   817                           ;test_60f01x_IR_Send.C: 193: else if(TxTime < 4)
   818  0093  3004               	movlw	4
   819  0094                     L1:	
   820  0094  0273               	subwf	_TxTime,w
   821  0095  1C03               	btfss	3,0
   822  0096  2855               	goto	i1l1102
   823                           
   824                           ;test_60f01x_IR_Send.C: 197: else
   825                           ;test_60f01x_IR_Send.C: 198: {
   826                           ;test_60f01x_IR_Send.C: 199: T0IE = 0;
   827  0097  128B               	bcf	11,5	;volatile
   828                           
   829                           ;test_60f01x_IR_Send.C: 200: IRSendStatus = 0;
   830  0098  01F6               	clrf	_IRSendStatus
   831                           
   832                           ;test_60f01x_IR_Send.C: 201: T0IE = 0;
   833  0099  128B               	bcf	11,5	;volatile
   834                           
   835                           ;test_60f01x_IR_Send.C: 202: SendLastBit = 0;
   836  009A  107D               	bcf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   837                           
   838                           ;test_60f01x_IR_Send.C: 203: TxBit = 0;
   839  009B  01F4               	clrf	_TxBit
   840                           
   841                           ;test_60f01x_IR_Send.C: 204: TxTime = 0;
   842  009C  01F3               	clrf	_TxTime
   843  009D  0008               	return
   844  009E                     i1l1148:	
   845                           
   846                           ;test_60f01x_IR_Send.C: 207: else
   847                           ;test_60f01x_IR_Send.C: 208: {
   848                           ;test_60f01x_IR_Send.C: 209: if(TxTime < 5)
   849  009E  3005               	movlw	5
   850  009F  0273               	subwf	_TxTime,w
   851  00A0  1C03               	btfss	3,0
   852  00A1  2867               	goto	i1l1106
   853                           
   854                           ;test_60f01x_IR_Send.C: 213: else if(TxTime < 6)
   855  00A2  3006               	movlw	6
   856  00A3  2894               	goto	L1
   857  00A4                     __end_of_SendCtrl:	
   858  007E                     btemp	set	126	;btemp
   859  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      14
    BANK0            48      0       7

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SendCtrl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                      _POWER_INITIAL
                     _TIMER0_INITIAL
                     _TIMER2_INITIAL
 ---------------------------------------------------------------------------------
 (1) _TIMER2_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              3 COMMON     3     3      0
                           _SendCtrl
 ---------------------------------------------------------------------------------
 (3) _SendCtrl                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _POWER_INITIAL
   _TIMER0_INITIAL
   _TIMER2_INITIAL

 _ISR (ROOT)
   _SendCtrl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               30      0       7       5       14.6%
BITBANK0            30      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      15       3        0.0%
ABS                  0      0      15       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Fri Oct 15 15:45:25 2021

                    _GIE 005F                      _PA4 002C                      _PR2 0092  
                    _ISR 00A4                      fsr0 0004                      indf 0000  
                   ?_ISR 0077                     l1222 00C7                     _T0IE 005D  
                   _T0IF 005A                     _PEIE 005E                     _TMR0 0001  
                   _TMR2 0011                     _WPUA 0095                     _main 00C3  
                   btemp 007E                     start 000C                    ??_ISR 007A  
         _TIMER0_INITIAL 00EF                    ?_main 0077           _TIMER2_INITIAL 00D3  
                  _T2CON 0012                    i1l471 004C                    i1l477 0088  
                  i1l499 00BA                    u30_25 0065                    _PORTA 0005  
                  _TRISA 0085                    _TxBit 0074           __pbitbssCOMMON 03E8  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000D             __end_of_main 00D3   __end_of_TIMER0_INITIAL 00F6  
 __end_of_TIMER2_INITIAL 00E1                   ??_main 0000         __end_of_SendCtrl 00A4  
                 i1l1102 0055                   i1l1104 0057                   i1l1106 0067  
                 i1l1108 0069                   i1l1070 0028                   i1l1082 0037  
                 i1l1090 003F                   i1l1170 00AD                   i1l1148 009E  
                 i1l1086 003A                   i1l1078 0031                   i1l1098 0050  
                 _INTCON 000B                   _OSCCON 008F                   _IRData 0040  
                 _TMR2IE 0461                   _TMR2IF 0061                   _OPTION 0081  
                 _TMR2ON 0092                   _TxTime 0073          ?_TIMER0_INITIAL 0077  
                 _level0 0071                   _level1 0070          ?_TIMER2_INITIAL 0077  
                 saved_w 007E    __end_of_POWER_INITIAL 00EF  __end_of__initialization 001F  
         __pcstackCOMMON 0077             __pidataBANK0 0000               __pbssBANK0 0044  
              ?_SendCtrl 0077               __pmaintext 00C3              _SendLastBit 03E8  
             __pintentry 0004              _SaveLastBit 0046                  _MSCKCON 001B  
             ??_SendCtrl 0077                  _Sendbit 0072                  __ptext1 00D3  
                __ptext2 00EF                  __ptext3 00E1                  __ptext4 00A4  
                __ptext5 0021             __size_of_ISR 001F     end_of_initialization 001F  
       ??_TIMER0_INITIAL 0000         ??_TIMER2_INITIAL 0000                _SYSTime5S 0044  
    start_initialization 000D              __end_of_ISR 00C3        __size_of_SendCtrl 0083  
            __pdataBANK0 0040   __size_of_POWER_INITIAL 000E              __pbssCOMMON 0070  
              ___latbits 0000            __pcstackBANK0 0000        interrupt_function 0004  
          _POWER_INITIAL 00E1           ?_POWER_INITIAL 0077                 _SendCtrl 0021  
          __size_of_main 0010             _IRSendStatus 0076  __size_of_TIMER0_INITIAL 0007  
__size_of_TIMER2_INITIAL 000E          ??_POWER_INITIAL 0000                 intlevel1 0000  
             _IRSendData 0075  
