

GNU Macro Assembler for 8 bit devices.       
                                                                                               Tue Sep 14 10:54:54 2021

GNU C Code Generator                                                 
     1                           	processor	FT61F13X
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	pa_nodes0,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 09/04/2020 
    23                           ; 
    24                           ; SFR Addresses
    25  0000                     
    26                           	psect	idataBANK0
    27  0000                     __pidataBANK0:	
    28  0016                     _P1CON	set	22
    29  0014                     _P1ADTH	set	20
    30  0013                     _TMR2H	set	19
    31  0012                     _T2CON0	set	18
    32  0011                     _TMR2L	set	17
    33  000E                     _P1ADTL	set	14
    34  000B                     _INTCON	set	11
    35  0007                     _PORTC	set	7
    36  0005                     _PORTA	set	5
    37  0001                     _TMR0	set	1
    38  0092                     _TMR2ON	set	146
    39  0061                     _TMR2IF	set	97
    40  005F                     _GIE	set	95
    41  005E                     _PEIE	set	94
    42  005D                     _T0IE	set	93
    43  005A                     _T0IF	set	90
    44  002C                     _PA4	set	44
    45  009E                     _T2CON1	set	158
    46  0099                     _P1POL	set	153
    47  0095                     _WPUA	set	149
    48  0093                     _WPUC	set	147
    49  0092                     _PR2H	set	146
    50  0091                     _PR2L	set	145
    51  0090                     _P1OE	set	144
    52  008F                     _OSCCON	set	143
    53  0087                     _TRISC	set	135
    54  0085                     _TRISA	set	133
    55  0081                     _OPTION	set	129
    56  0461                     _TMR2IE	set	1121
    57                           
    58                           	psect	cinit
    59  000F                     start_initialization:	
    60                           ; #config settings
    61                           
    62  000F                     __initialization:	
    63                           
    64                           ;initializer for _IRData
    65  000F  30FF               	movlw	255
    66  0010  01A0               	clrf	__pdataBANK0& (0+127)
    67  0011  00A1               	movwf	(__pdataBANK0+1)& (0+127)
    68  0012  3040               	movlw	64
    69  0013  00A2               	movwf	(__pdataBANK0+2)& (0+127)
    70  0014  30BF               	movlw	191
    71  0015  00A3               	movwf	(__pdataBANK0+3)& (0+127)
    72                           
    73                           ; Clear objects allocated to BANK0
    74  0016  01A4               	clrf	__pbssBANK0& (0+127)
    75  0017  01A5               	clrf	(__pbssBANK0+1)& (0+127)
    76  0018  01A6               	clrf	(__pbssBANK0+2)& (0+127)
    77                           
    78                           ; Clear objects allocated to COMMON
    79  0019  01F0               	clrf	__pbssCOMMON& (0+127)
    80  001A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    81  001B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    82  001C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    83  001D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    84  001E  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    85  001F  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    86                           
    87                           ; Clear objects allocated to BITCOMMON
    88  0020  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    89  0021                     end_of_initialization:	
    90                           ;End of C runtime variable initialization code
    91                           
    92  0021                     __end_of__initialization:	
    93  0021  0183               	clrf	3
    94  0022  118A  28E9         	ljmp	_main	;jump to C main() function
    95                           
    96                           	psect	bitbssCOMMON
    97  03E8                     __pbitbssCOMMON:	
    98  03E8                     _SendLastBit:	
    99  03E8                     	ds	1
   100                           
   101                           	psect	bssCOMMON
   102  0070                     __pbssCOMMON:	
   103  0070                     _level1:	
   104  0070                     	ds	1
   105  0071                     _level0:	
   106  0071                     	ds	1
   107  0072                     _Sendbit:	
   108  0072                     	ds	1
   109  0073                     _TxTime:	
   110  0073                     	ds	1
   111  0074                     _TxBit:	
   112  0074                     	ds	1
   113  0075                     _IRSendData:	
   114  0075                     	ds	1
   115  0076                     _IRSendStatus:	
   116  0076                     	ds	1
   117                           
   118                           	psect	bssBANK0
   119  0024                     __pbssBANK0:	
   120  0024                     _SYSTime5S:	
   121  0024                     	ds	2
   122  0026                     _SaveLastBit:	
   123  0026                     	ds	1
   124                           
   125                           	psect	dataBANK0
   126  0020                     __pdataBANK0:	
   127  0020                     _IRData:	
   128  0020                     	ds	4
   129                           
   130                           	psect	cstackCOMMON
   131  0077                     __pcstackCOMMON:	
   132  0077                     ?_POWER_INITIAL:	
   133  0077                     ?_TIMER0_INITIAL:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0077                     ?_Timer2Inital:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0077                     ?_SendCtrl:	
   140                           ; 1 bytes @ 0x0
   141                           
   142  0077                     ??_SendCtrl:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0077                     ?_ISR:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0077                     ?_main:	
   149                           ; 1 bytes @ 0x0
   150                           
   151                           
   152                           ; 1 bytes @ 0x0
   153  0077                     	ds	3
   154  007A                     ??_ISR:	
   155                           
   156                           ; 1 bytes @ 0x3
   157  007A                     	ds	3
   158                           
   159                           	psect	cstackBANK0
   160  0000                     __pcstackBANK0:	
   161  0000                     ??_POWER_INITIAL:	
   162  0000                     ??_TIMER0_INITIAL:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0000                     ??_Timer2Inital:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0000                     ??_main:	
   169                           ; 1 bytes @ 0x0
   170                           
   171                           
   172                           	psect	maintext
   173  00E9                     __pmaintext:	
   174                           ; 1 bytes @ 0x0
   175 ;;
   176 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   177 ;;
   178 ;; *************** function _main *****************
   179 ;; Defined at:
   180 ;;		line 307 in file "test_61f13x_IR_Send.C"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;		None
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0, pclath, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : B00/0
   191 ;;		On exit  : B00/0
   192 ;;		Unchanged: 800/0
   193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   194 ;;      Params:         0       0       0       0
   195 ;;      Locals:         0       0       0       0
   196 ;;      Temps:          0       0       0       0
   197 ;;      Totals:         0       0       0       0
   198 ;;Total ram usage:        0 bytes
   199 ;; Hardware stack levels required when called:    3
   200 ;; This function calls:
   201 ;;		_POWER_INITIAL
   202 ;;		_TIMER0_INITIAL
   203 ;;		_Timer2Inital
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           
   210                           ;psect for function _main
   211  00E9                     _main:	
   212                           
   213                           ;test_61f13x_IR_Send.C: 309: POWER_INITIAL();
   214                           
   215                           ;incstack = 0
   216                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   217  00E9  118A  20FF  118A   	fcall	_POWER_INITIAL
   218                           
   219                           ;test_61f13x_IR_Send.C: 310: TIMER0_INITIAL();
   220  00EC  118A  2111  118A   	fcall	_TIMER0_INITIAL
   221                           
   222                           ;test_61f13x_IR_Send.C: 311: Timer2Inital();
   223  00EF  118A  20CA  118A   	fcall	_Timer2Inital
   224                           
   225                           ;test_61f13x_IR_Send.C: 312: GIE = 1;
   226  00F2  178B               	bsf	11,7	;volatile
   227  00F3                     l2068:	
   228                           
   229                           ;test_61f13x_IR_Send.C: 314: {
   230                           ;test_61f13x_IR_Send.C: 315: if(SYSTime5S >10000)
   231  00F3  3027               	movlw	39
   232  00F4  0225               	subwf	_SYSTime5S+1,w
   233  00F5  3011               	movlw	17
   234  00F6  1903               	skipnz
   235  00F7  0224               	subwf	_SYSTime5S,w
   236  00F8  1C03               	skipc
   237  00F9  28F3               	goto	l2068
   238                           
   239                           ;test_61f13x_IR_Send.C: 316: {
   240                           ;test_61f13x_IR_Send.C: 317: SYSTime5S = 0;
   241  00FA  01A4               	clrf	_SYSTime5S
   242  00FB  01A5               	clrf	_SYSTime5S+1
   243                           
   244                           ;test_61f13x_IR_Send.C: 318: IRSendStatus = 1;
   245  00FC  01F6               	clrf	_IRSendStatus
   246  00FD  0AF6               	incf	_IRSendStatus,f
   247  00FE  28F3               	goto	l2068
   248  00FF                     __end_of_main:	
   249                           
   250                           	psect	text1
   251  00CA                     __ptext1:	
   252 ;; *************** function _Timer2Inital *****************
   253 ;; Defined at:
   254 ;;		line 98 in file "test_61f13x_IR_Send.C"
   255 ;; Parameters:    Size  Location     Type
   256 ;;		None
   257 ;; Auto vars:     Size  Location     Type
   258 ;;		None
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2
   263 ;; Tracked objects:
   264 ;;		On entry : B00/0
   265 ;;		On exit  : B00/0
   266 ;;		Unchanged: 800/0
   267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   268 ;;      Params:         0       0       0       0
   269 ;;      Locals:         0       0       0       0
   270 ;;      Temps:          0       0       0       0
   271 ;;      Totals:         0       0       0       0
   272 ;;Total ram usage:        0 bytes
   273 ;; Hardware stack levels used:    1
   274 ;; Hardware stack levels required when called:    2
   275 ;; This function calls:
   276 ;;		Nothing
   277 ;; This function is called by:
   278 ;;		_main
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           
   283                           ;psect for function _Timer2Inital
   284  00CA                     _Timer2Inital:	
   285                           
   286                           ;test_61f13x_IR_Send.C: 100: T2CON0 = 0B00011001;
   287                           
   288                           ;incstack = 0
   289                           ; Regs used in _Timer2Inital: [wreg+status,2]
   290  00CA  3019               	movlw	25
   291  00CB  0092               	movwf	18	;volatile
   292                           
   293                           ;test_61f13x_IR_Send.C: 105: T2CON1 = 0B00000000;
   294  00CC  1683               	bsf	3,5	;RP0=1, select bank1
   295  00CD  019E               	clrf	30	;volatile
   296                           
   297                           ;test_61f13x_IR_Send.C: 111: TMR2H = 0;
   298  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   299  00CF  0193               	clrf	19	;volatile
   300                           
   301                           ;test_61f13x_IR_Send.C: 112: TMR2L = 141;
   302  00D0  308D               	movlw	141
   303  00D1  0091               	movwf	17	;volatile
   304                           
   305                           ;test_61f13x_IR_Send.C: 115: PR2H = 0;
   306  00D2  1683               	bsf	3,5	;RP0=1, select bank1
   307  00D3  0192               	clrf	18	;volatile
   308                           
   309                           ;test_61f13x_IR_Send.C: 116: PR2L = 141;
   310  00D4  0091               	movwf	17	;volatile
   311                           
   312                           ;test_61f13x_IR_Send.C: 118: P1ADTH = 0;
   313  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   314  00D6  0194               	clrf	20	;volatile
   315                           
   316                           ;test_61f13x_IR_Send.C: 119: P1ADTL = 50;
   317  00D7  3032               	movlw	50
   318  00D8  008E               	movwf	14	;volatile
   319                           
   320                           ;test_61f13x_IR_Send.C: 121: P1OE=0B00000000;
   321  00D9  1683               	bsf	3,5	;RP0=1, select bank1
   322  00DA  0190               	clrf	16	;volatile
   323                           
   324                           ;test_61f13x_IR_Send.C: 130: P1CON=0B00000001;
   325  00DB  3001               	movlw	1
   326  00DC  1283               	bcf	3,5	;RP0=0, select bank0
   327  00DD  0096               	movwf	22	;volatile
   328                           
   329                           ;test_61f13x_IR_Send.C: 132: P1POL=0B00000000;
   330  00DE  1683               	bsf	3,5	;RP0=1, select bank1
   331  00DF  0199               	clrf	25	;volatile
   332                           
   333                           ;test_61f13x_IR_Send.C: 142: TMR2IF = 0;
   334  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   335  00E1  108C               	bcf	12,1	;volatile
   336                           
   337                           ;test_61f13x_IR_Send.C: 143: TMR2IE = 1;
   338  00E2  1683               	bsf	3,5	;RP0=1, select bank1
   339  00E3  148C               	bsf	12,1	;volatile
   340                           
   341                           ;test_61f13x_IR_Send.C: 144: TMR2ON = 1;
   342  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   343  00E5  1512               	bsf	18,2	;volatile
   344                           
   345                           ;test_61f13x_IR_Send.C: 145: PEIE = 1;
   346  00E6  170B               	bsf	11,6	;volatile
   347                           
   348                           ;test_61f13x_IR_Send.C: 146: GIE = 1;
   349  00E7  178B               	bsf	11,7	;volatile
   350  00E8  0008               	return
   351  00E9                     __end_of_Timer2Inital:	
   352                           
   353                           	psect	text2
   354  0111                     __ptext2:	
   355 ;; *************** function _TIMER0_INITIAL *****************
   356 ;; Defined at:
   357 ;;		line 85 in file "test_61f13x_IR_Send.C"
   358 ;; Parameters:    Size  Location     Type
   359 ;;		None
   360 ;; Auto vars:     Size  Location     Type
   361 ;;		None
   362 ;; Return value:  Size  Location     Type
   363 ;;                  1    wreg      void 
   364 ;; Registers used:
   365 ;;		wreg, status,2
   366 ;; Tracked objects:
   367 ;;		On entry : B00/100
   368 ;;		On exit  : B00/0
   369 ;;		Unchanged: 800/0
   370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   371 ;;      Params:         0       0       0       0
   372 ;;      Locals:         0       0       0       0
   373 ;;      Temps:          0       0       0       0
   374 ;;      Totals:         0       0       0       0
   375 ;;Total ram usage:        0 bytes
   376 ;; Hardware stack levels used:    1
   377 ;; Hardware stack levels required when called:    2
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           
   386                           ;psect for function _TIMER0_INITIAL
   387  0111                     _TIMER0_INITIAL:	
   388                           
   389                           ;test_61f13x_IR_Send.C: 87: OPTION = 0B00000000;
   390                           
   391                           ;incstack = 0
   392                           ; Regs used in _TIMER0_INITIAL: [wreg+status,2]
   393  0111  0181               	clrf	1	;volatile
   394                           
   395                           ;test_61f13x_IR_Send.C: 88: TMR0 = 239;
   396  0112  30EF               	movlw	239
   397  0113  1283               	bcf	3,5	;RP0=0, select bank0
   398  0114  0081               	movwf	1	;volatile
   399                           
   400                           ;test_61f13x_IR_Send.C: 89: T0IF = 0;
   401  0115  110B               	bcf	11,2	;volatile
   402  0116  0008               	return
   403  0117                     __end_of_TIMER0_INITIAL:	
   404                           
   405                           	psect	text3
   406  00FF                     __ptext3:	
   407 ;; *************** function _POWER_INITIAL *****************
   408 ;; Defined at:
   409 ;;		line 63 in file "test_61f13x_IR_Send.C"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2
   418 ;; Tracked objects:
   419 ;;		On entry : B00/0
   420 ;;		On exit  : B00/100
   421 ;;		Unchanged: 800/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   423 ;;      Params:         0       0       0       0
   424 ;;      Locals:         0       0       0       0
   425 ;;      Temps:          0       0       0       0
   426 ;;      Totals:         0       0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels used:    1
   429 ;; Hardware stack levels required when called:    2
   430 ;; This function calls:
   431 ;;		Nothing
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _POWER_INITIAL
   439  00FF                     _POWER_INITIAL:	
   440                           
   441                           ;test_61f13x_IR_Send.C: 65: OSCCON = 0B01110001;
   442                           
   443                           ;incstack = 0
   444                           ; Regs used in _POWER_INITIAL: [wreg+status,2]
   445  00FF  3071               	movlw	113
   446  0100  1683               	bsf	3,5	;RP0=1, select bank1
   447  0101  008F               	movwf	15	;volatile
   448                           
   449                           ;test_61f13x_IR_Send.C: 66: OPTION = 0B00001000;
   450  0102  3008               	movlw	8
   451  0103  0081               	movwf	1	;volatile
   452                           
   453                           ;test_61f13x_IR_Send.C: 67: INTCON = 0;
   454  0104  018B               	clrf	11	;volatile
   455                           
   456                           ;test_61f13x_IR_Send.C: 68: PORTA = 0B00000000;
   457  0105  1283               	bcf	3,5	;RP0=0, select bank0
   458  0106  0185               	clrf	5	;volatile
   459                           
   460                           ;test_61f13x_IR_Send.C: 69: TRISA = 0B00000010;
   461  0107  3002               	movlw	2
   462  0108  1683               	bsf	3,5	;RP0=1, select bank1
   463  0109  0085               	movwf	5	;volatile
   464                           
   465                           ;test_61f13x_IR_Send.C: 71: PORTC = 0B00000000;
   466  010A  1283               	bcf	3,5	;RP0=0, select bank0
   467  010B  0187               	clrf	7	;volatile
   468                           
   469                           ;test_61f13x_IR_Send.C: 72: TRISC = 0B00000000;
   470  010C  1683               	bsf	3,5	;RP0=1, select bank1
   471  010D  0187               	clrf	7	;volatile
   472                           
   473                           ;test_61f13x_IR_Send.C: 74: WPUA = 0B00000010;
   474  010E  0095               	movwf	21	;volatile
   475                           
   476                           ;test_61f13x_IR_Send.C: 76: WPUC = 0B00000000;
   477  010F  0193               	clrf	19	;volatile
   478  0110  0008               	return
   479  0111                     __end_of_POWER_INITIAL:	
   480                           
   481                           	psect	text4
   482  0024                     __ptext4:	
   483 ;; *************** function _ISR *****************
   484 ;; Defined at:
   485 ;;		line 278 in file "test_61f13x_IR_Send.C"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 200/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   499 ;;      Params:         0       0       0       0
   500 ;;      Locals:         0       0       0       0
   501 ;;      Temps:          3       0       0       0
   502 ;;      Totals:         3       0       0       0
   503 ;;Total ram usage:        3 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; Hardware stack levels required when called:    1
   506 ;; This function calls:
   507 ;;		_SendCtrl
   508 ;; This function is called by:
   509 ;;		Interrupt level 1
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           
   514                           ;psect for function _ISR
   515  0024                     _ISR:	
   516                           
   517                           ;test_61f13x_IR_Send.C: 282: if(T0IE && T0IF)
   518  0024  1A8B               	btfsc	11,5	;volatile
   519  0025  1D0B               	btfss	11,2	;volatile
   520  0026  282E               	goto	i1l2000
   521                           
   522                           ;test_61f13x_IR_Send.C: 283: {
   523                           ;test_61f13x_IR_Send.C: 284: TMR0 = 239;
   524  0027  30EF               	movlw	239
   525  0028  1283               	bcf	3,5	;RP0=0, select bank0
   526  0029  1303               	bcf	3,6	;RP1=0, select bank0
   527  002A  0081               	movwf	1	;volatile
   528                           
   529                           ;test_61f13x_IR_Send.C: 285: T0IF = 0;
   530  002B  110B               	bcf	11,2	;volatile
   531                           
   532                           ;test_61f13x_IR_Send.C: 286: PA4 = ~PA4;
   533  002C  3010               	movlw	16
   534  002D  0685               	xorwf	5,f
   535  002E                     i1l2000:	
   536                           
   537                           ;test_61f13x_IR_Send.C: 288: }
   538                           ;test_61f13x_IR_Send.C: 291: if(TMR2IE && TMR2IF)
   539  002E  1683               	bsf	3,5	;RP0=1, select bank1
   540  002F  1303               	bcf	3,6	;RP1=0, select bank1
   541  0030  1C8C               	btfss	12,1	;volatile
   542  0031  283C               	goto	i1l1295
   543  0032  1283               	bcf	3,5	;RP0=0, select bank0
   544  0033  1C8C               	btfss	12,1	;volatile
   545  0034  283C               	goto	i1l1295
   546                           
   547                           ;test_61f13x_IR_Send.C: 292: {
   548                           ;test_61f13x_IR_Send.C: 293: TMR2IF = 0;
   549  0035  108C               	bcf	12,1	;volatile
   550                           
   551                           ;test_61f13x_IR_Send.C: 294: SendCtrl();
   552  0036  2045               	fcall	_SendCtrl
   553                           
   554                           ;test_61f13x_IR_Send.C: 295: SYSTime5S++;
   555  0037  1283               	bcf	3,5	;RP0=0, select bank0
   556  0038  1303               	bcf	3,6	;RP1=0, select bank0
   557  0039  0AA4               	incf	_SYSTime5S,f
   558  003A  1903               	skipnz
   559  003B  0AA5               	incf	_SYSTime5S+1,f
   560  003C                     i1l1295:	
   561  003C  087C               	movf	??_ISR+2,w
   562  003D  008A               	movwf	10
   563  003E  087B               	movf	??_ISR+1,w
   564  003F  0084               	movwf	4
   565  0040  0E7A               	swapf	??_ISR^(0+-128),w
   566  0041  0083               	movwf	3
   567  0042  0EFE               	swapf	126,f
   568  0043  0E7E               	swapf	126,w
   569  0044  0009               	retfie
   570  0045                     __end_of_ISR:	
   571  0045                     __ptext5:	
   572 ;; *************** function _SendCtrl *****************
   573 ;; Defined at:
   574 ;;		line 154 in file "test_61f13x_IR_Send.C"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   583 ;; Tracked objects:
   584 ;;		On entry : 300/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   588 ;;      Params:         0       0       0       0
   589 ;;      Locals:         0       0       0       0
   590 ;;      Temps:          3       0       0       0
   591 ;;      Totals:         3       0       0       0
   592 ;;Total ram usage:        3 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_ISR
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function _SendCtrl
   603  0045                     _SendCtrl:	
   604                           
   605                           ;test_61f13x_IR_Send.C: 157: if (IRSendStatus == 0)
   606                           
   607                           ;incstack = 0
   608                           ; Regs used in _SendCtrl: [wreg-fsr0h+status,2+status,0]
   609  0045  0876               	movf	_IRSendStatus,w
   610  0046  1D03               	btfss	3,2
   611  0047  284C               	goto	i1l1900
   612                           
   613                           ;test_61f13x_IR_Send.C: 158: {
   614                           ;test_61f13x_IR_Send.C: 159: T0IE = 0;
   615  0048  128B               	bcf	11,5	;volatile
   616                           
   617                           ;test_61f13x_IR_Send.C: 160: Sendbit = 0;
   618  0049  01F2               	clrf	_Sendbit
   619                           
   620                           ;test_61f13x_IR_Send.C: 161: TxTime = 0;
   621  004A  01F3               	clrf	_TxTime
   622                           
   623                           ;test_61f13x_IR_Send.C: 163: }
   624  004B  0008               	return
   625  004C                     i1l1900:	
   626                           
   627                           ;test_61f13x_IR_Send.C: 164: else if (IRSendStatus == 1)
   628  004C  0B76               	decfsz	_IRSendStatus,w
   629  004D  2863               	goto	i1l1920
   630  004E  3011               	movlw	17
   631                           
   632                           ;test_61f13x_IR_Send.C: 165: {
   633                           ;test_61f13x_IR_Send.C: 166: TxTime++;
   634  004F  0AF3               	incf	_TxTime,f
   635                           
   636                           ;test_61f13x_IR_Send.C: 167: if (TxTime < 17)
   637  0050  0273               	subwf	_TxTime,w
   638  0051  1803               	skipnc
   639  0052  2855               	goto	i1l1908
   640                           
   641                           ;test_61f13x_IR_Send.C: 168: {
   642                           ;test_61f13x_IR_Send.C: 169: T0IE = 1;
   643  0053  168B               	bsf	11,5	;volatile
   644                           
   645                           ;test_61f13x_IR_Send.C: 170: }
   646  0054  285E               	goto	i1l1916
   647  0055                     i1l1908:	
   648                           
   649                           ;test_61f13x_IR_Send.C: 171: else if (TxTime < 24)
   650  0055  3018               	movlw	24
   651  0056  0273               	subwf	_TxTime,w
   652  0057  1803               	skipnc
   653  0058  285B               	goto	i1l1912
   654                           
   655                           ;test_61f13x_IR_Send.C: 172: {
   656                           ;test_61f13x_IR_Send.C: 173: T0IE = 0;
   657  0059  128B               	bcf	11,5	;volatile
   658                           
   659                           ;test_61f13x_IR_Send.C: 174: }
   660  005A  285E               	goto	i1l1916
   661  005B                     i1l1912:	
   662  005B  3002               	movlw	2
   663                           
   664                           ;test_61f13x_IR_Send.C: 175: else
   665                           ;test_61f13x_IR_Send.C: 176: {
   666                           ;test_61f13x_IR_Send.C: 177: TxTime = 0;
   667  005C  01F3               	clrf	_TxTime
   668                           
   669                           ;test_61f13x_IR_Send.C: 178: IRSendStatus = 2;
   670  005D  00F6               	movwf	_IRSendStatus
   671  005E                     i1l1916:	
   672                           
   673                           ;test_61f13x_IR_Send.C: 179: }
   674                           ;test_61f13x_IR_Send.C: 180: IRSendData = IRData[0];
   675  005E  0820               	movf	_IRData,w
   676  005F  00F5               	movwf	_IRSendData
   677                           
   678                           ;test_61f13x_IR_Send.C: 181: TxBit = 0x01;
   679  0060  01F4               	clrf	_TxBit
   680  0061  0AF4               	incf	_TxBit,f
   681                           
   682                           ;test_61f13x_IR_Send.C: 182: }
   683  0062  0008               	return
   684  0063                     i1l1920:	
   685                           
   686                           ;test_61f13x_IR_Send.C: 183: else if(IRSendStatus == 2)
   687  0063  3002               	movlw	2
   688  0064  0676               	xorwf	_IRSendStatus,w
   689  0065  1D03               	btfss	3,2
   690  0066  0008               	return
   691                           
   692                           ;test_61f13x_IR_Send.C: 184: {
   693                           ;test_61f13x_IR_Send.C: 185: if (IRSendData & TxBit)
   694  0067  0875               	movf	_IRSendData,w
   695  0068  0574               	andwf	_TxBit,w
   696  0069  1903               	btfsc	3,2
   697  006A  2870               	goto	i1l1267
   698  006B  3003               	movlw	3
   699                           
   700                           ;test_61f13x_IR_Send.C: 186: {
   701                           ;test_61f13x_IR_Send.C: 187: level1 = 1;
   702  006C  01F0               	clrf	_level1
   703  006D  0AF0               	incf	_level1,f
   704                           
   705                           ;test_61f13x_IR_Send.C: 188: level0 = 3;
   706  006E  00F1               	movwf	_level0
   707                           
   708                           ;test_61f13x_IR_Send.C: 189: }
   709  006F  2874               	goto	i1l1928
   710  0070                     i1l1267:	
   711                           
   712                           ;test_61f13x_IR_Send.C: 190: else
   713                           ;test_61f13x_IR_Send.C: 191: {
   714                           ;test_61f13x_IR_Send.C: 192: level1 = 1;
   715  0070  01F0               	clrf	_level1
   716  0071  0AF0               	incf	_level1,f
   717                           
   718                           ;test_61f13x_IR_Send.C: 193: level0 = 1;
   719  0072  01F1               	clrf	_level0
   720  0073  0AF1               	incf	_level0,f
   721  0074                     i1l1928:	
   722                           
   723                           ;test_61f13x_IR_Send.C: 194: }
   724                           ;test_61f13x_IR_Send.C: 195: TxTime++;
   725  0074  0AF3               	incf	_TxTime,f
   726                           
   727                           ;test_61f13x_IR_Send.C: 196: if (TxTime <= level1)
   728  0075  0873               	movf	_TxTime,w
   729  0076  0270               	subwf	_level1,w
   730  0077  1C03               	skipc
   731  0078  287B               	goto	i1l1934
   732  0079                     i1l1932:	
   733                           
   734                           ;test_61f13x_IR_Send.C: 197: {
   735                           ;test_61f13x_IR_Send.C: 198: T0IE = 1;
   736  0079  168B               	bsf	11,5	;volatile
   737                           
   738                           ;test_61f13x_IR_Send.C: 199: }
   739  007A  0008               	return
   740  007B                     i1l1934:	
   741                           
   742                           ;test_61f13x_IR_Send.C: 200: else if (TxTime <= (level0+level1))
   743  007B  0871               	movf	_level0,w
   744  007C  0770               	addwf	_level1,w
   745  007D  00F7               	movwf	??_SendCtrl
   746  007E  01F8               	clrf	??_SendCtrl+1
   747  007F  0DF8               	rlf	??_SendCtrl+1,f
   748  0080  0878               	movf	??_SendCtrl+1,w
   749  0081  3A80               	xorlw	128
   750  0082  00F9               	movwf	??_SendCtrl+2
   751  0083  3080               	movlw	128
   752  0084  0279               	subwf	??_SendCtrl+2,w
   753  0085  1D03               	skipz
   754  0086  2889               	goto	u30_25
   755  0087  0873               	movf	_TxTime,w
   756  0088  0277               	subwf	??_SendCtrl,w
   757  0089                     u30_25:	
   758  0089  1C03               	skipc
   759  008A  288D               	goto	i1l1938
   760  008B                     i1l1936:	
   761                           
   762                           ;test_61f13x_IR_Send.C: 201: {
   763                           ;test_61f13x_IR_Send.C: 202: T0IE = 0;
   764  008B  128B               	bcf	11,5	;volatile
   765                           
   766                           ;test_61f13x_IR_Send.C: 203: }
   767  008C  0008               	return
   768  008D                     i1l1938:	
   769                           
   770                           ;test_61f13x_IR_Send.C: 204: else if (Sendbit < 4)
   771  008D  3004               	movlw	4
   772  008E  0272               	subwf	_Sendbit,w
   773  008F  1803               	skipnc
   774  0090  28AD               	goto	i1l1273
   775                           
   776                           ;test_61f13x_IR_Send.C: 205: {
   777                           ;test_61f13x_IR_Send.C: 206: TxTime = 1;
   778  0091  01F3               	clrf	_TxTime
   779  0092  0AF3               	incf	_TxTime,f
   780                           
   781                           ;test_61f13x_IR_Send.C: 207: T0IE = 1;
   782  0093  168B               	bsf	11,5	;volatile
   783                           
   784                           ;test_61f13x_IR_Send.C: 208: SaveLastBit = IRSendData & TxBit;
   785  0094  0875               	movf	_IRSendData,w
   786  0095  1283               	bcf	3,5	;RP0=0, select bank0
   787  0096  1303               	bcf	3,6	;RP1=0, select bank0
   788  0097  00A6               	movwf	_SaveLastBit
   789  0098  0874               	movf	_TxBit,w
   790  0099  05A6               	andwf	_SaveLastBit,f
   791                           
   792                           ;test_61f13x_IR_Send.C: 209: TxBit <<= 1;
   793  009A  1003               	clrc
   794  009B  0DF4               	rlf	_TxBit,f
   795                           
   796                           ;test_61f13x_IR_Send.C: 210: if (TxBit == 0x00)
   797  009C  0874               	movf	_TxBit,w
   798  009D  1D03               	btfss	3,2
   799  009E  0008               	return
   800                           
   801                           ;test_61f13x_IR_Send.C: 211: {
   802                           ;test_61f13x_IR_Send.C: 212: TxBit = 0x01;
   803  009F  01F4               	clrf	_TxBit
   804  00A0  0AF4               	incf	_TxBit,f
   805                           
   806                           ;test_61f13x_IR_Send.C: 213: Sendbit++;
   807  00A1  0AF2               	incf	_Sendbit,f
   808                           
   809                           ;test_61f13x_IR_Send.C: 214: IRSendData = IRData[Sendbit];
   810  00A2  0872               	movf	_Sendbit,w
   811  00A3  3E20               	addlw	(low (_IRData| 0))& (0+255)
   812  00A4  0084               	movwf	4
   813  00A5  1383               	bcf	3,7	;select IRP bank0
   814  00A6  0800               	movf	0,w
   815  00A7  00F5               	movwf	_IRSendData
   816                           
   817                           ;test_61f13x_IR_Send.C: 215: if (Sendbit > 3)
   818  00A8  3004               	movlw	4
   819  00A9  0272               	subwf	_Sendbit,w
   820  00AA  1803               	btfsc	3,0
   821                           
   822                           ;test_61f13x_IR_Send.C: 216: {
   823                           ;test_61f13x_IR_Send.C: 217: SendLastBit = 1;
   824  00AB  147D               	bsf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   825  00AC  0008               	return
   826  00AD                     i1l1273:	
   827                           
   828                           ;test_61f13x_IR_Send.C: 221: else
   829                           ;test_61f13x_IR_Send.C: 222: {
   830                           ;test_61f13x_IR_Send.C: 223: if(SendLastBit)
   831  00AD  1C7D               	btfss	_SendLastBit/(0+8),_SendLastBit& (0+7)
   832  00AE  0008               	return
   833                           
   834                           ;test_61f13x_IR_Send.C: 224: {
   835                           ;test_61f13x_IR_Send.C: 225: TxTime++;
   836  00AF  0AF3               	incf	_TxTime,f
   837                           
   838                           ;test_61f13x_IR_Send.C: 226: if(SaveLastBit)
   839  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   840  00B1  1303               	bcf	3,6	;RP1=0, select bank0
   841  00B2  0826               	movf	_SaveLastBit,w
   842  00B3  1903               	btfsc	3,2
   843  00B4  28C4               	goto	i1l1978
   844                           
   845                           ;test_61f13x_IR_Send.C: 227: {
   846                           ;test_61f13x_IR_Send.C: 228: if(TxTime < 3)
   847  00B5  3003               	movlw	3
   848  00B6  0273               	subwf	_TxTime,w
   849  00B7  1C03               	btfss	3,0
   850  00B8  288B               	goto	i1l1936
   851                           
   852                           ;test_61f13x_IR_Send.C: 232: else if(TxTime < 4)
   853  00B9  3004               	movlw	4
   854  00BA                     L1:	
   855  00BA  0273               	subwf	_TxTime,w
   856  00BB  1C03               	btfss	3,0
   857  00BC  2879               	goto	i1l1932
   858                           
   859                           ;test_61f13x_IR_Send.C: 236: else
   860                           ;test_61f13x_IR_Send.C: 237: {
   861                           ;test_61f13x_IR_Send.C: 238: T0IE = 0;
   862  00BD  128B               	bcf	11,5	;volatile
   863                           
   864                           ;test_61f13x_IR_Send.C: 239: IRSendStatus = 0;
   865  00BE  01F6               	clrf	_IRSendStatus
   866                           
   867                           ;test_61f13x_IR_Send.C: 240: T0IE = 0;
   868  00BF  128B               	bcf	11,5	;volatile
   869                           
   870                           ;test_61f13x_IR_Send.C: 241: SendLastBit = 0;
   871  00C0  107D               	bcf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   872                           
   873                           ;test_61f13x_IR_Send.C: 242: TxBit = 0;
   874  00C1  01F4               	clrf	_TxBit
   875                           
   876                           ;test_61f13x_IR_Send.C: 243: TxTime = 0;
   877  00C2  01F3               	clrf	_TxTime
   878  00C3  0008               	return
   879  00C4                     i1l1978:	
   880                           
   881                           ;test_61f13x_IR_Send.C: 246: else
   882                           ;test_61f13x_IR_Send.C: 247: {
   883                           ;test_61f13x_IR_Send.C: 248: if(TxTime < 5)
   884  00C4  3005               	movlw	5
   885  00C5  0273               	subwf	_TxTime,w
   886  00C6  1C03               	btfss	3,0
   887  00C7  288B               	goto	i1l1936
   888                           
   889                           ;test_61f13x_IR_Send.C: 252: else if(TxTime < 6)
   890  00C8  3006               	movlw	6
   891  00C9  28BA               	goto	L1
   892  00CA                     __end_of_SendCtrl:	
   893  007E                     btemp	set	126	;btemp
   894  007E                     wtemp0	set	126
   895                           
   896                           	psect	intentry
   897  0004                     __pintentry:	
   898                           ;incstack = 0
   899                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   900                           
   901  0004                     interrupt_function:	
   902  007E                     saved_w	set	btemp
   903  0004  00FE               	movwf	btemp
   904  0005  0E03               	swapf	3,w
   905  0006  00FA               	movwf	??_ISR
   906  0007  0804               	movf	4,w
   907  0008  00FB               	movwf	??_ISR+1
   908  0009  080A               	movf	10,w
   909  000A  00FC               	movwf	??_ISR+2
   910  000B  118A  2824         	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      14
    BANK0            80      0       7
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SendCtrl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                      _POWER_INITIAL
                     _TIMER0_INITIAL
                       _Timer2Inital
 ---------------------------------------------------------------------------------
 (1) _Timer2Inital                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              3 COMMON     3     3      0
                           _SendCtrl
 ---------------------------------------------------------------------------------
 (3) _SendCtrl                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _POWER_INITIAL
   _TIMER0_INITIAL
   _Timer2Inital

 _ISR (ROOT)
   _SendCtrl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       7       3        8.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      15      10        0.0%
ABS                  0      0      15       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Tue Sep 14 10:54:54 2021

                    _GIE 005F                      _PA4 002C                      _ISR 0024  
                    fsr0 0004                      indf 0000                     ?_ISR 0077  
                   l2068 00F3                     _P1OE 0090                     _T0IE 005D  
                   _T0IF 005A                     _PEIE 005E                     _PR2H 0092  
                   _PR2L 0091                     _TMR0 0001                     _WPUA 0095  
                   _WPUC 0093                     _main 00E9                     btemp 007E  
                   start 000D                    ??_ISR 007A           _TIMER0_INITIAL 0111  
                  ?_main 0077                    _P1CON 0016                    _P1POL 0099  
                  u30_25 0089                    _TMR2H 0013                    _TMR2L 0011  
                  _PORTA 0005                    _PORTC 0007                    _TRISA 0085  
                  _TRISC 0087                    _TxBit 0074           __pbitbssCOMMON 03E8  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 00FF   __end_of_TIMER0_INITIAL 0117  
                 ??_main 0000         __end_of_SendCtrl 00CA                   _P1ADTH 0014  
                 _P1ADTL 000E                   _T2CON0 0012                   _T2CON1 009E  
                 i1l2000 002E                   i1l1273 00AD                   i1l1267 0070  
                 i1l1295 003C                   i1l1900 004C                   i1l1912 005B  
                 i1l1920 0063                   i1l1932 0079                   i1l1916 005E  
                 i1l1908 0055                   i1l1934 007B                   i1l1936 008B  
                 i1l1928 0074                   i1l1938 008D                   i1l1978 00C4  
                 _INTCON 000B                   _OSCCON 008F                   _IRData 0020  
                 _TMR2IE 0461                   _TMR2IF 0061                   _OPTION 0081  
                 _TMR2ON 0092                   _TxTime 0073          ?_TIMER0_INITIAL 0077  
                 _level0 0071                   _level1 0070                   saved_w 007E  
  __end_of_POWER_INITIAL 0111  __end_of__initialization 0021           __pcstackCOMMON 0077  
           __pidataBANK0 0000               __pbssBANK0 0024            ?_Timer2Inital 0077  
              ?_SendCtrl 0077               __pmaintext 00E9              _SendLastBit 03E8  
             __pintentry 0004              _SaveLastBit 0026           ??_Timer2Inital 0000  
             ??_SendCtrl 0077                  _Sendbit 0072                  __ptext1 00CA  
                __ptext2 0111                  __ptext3 00FF                  __ptext4 0024  
                __ptext5 0045             __size_of_ISR 0021     end_of_initialization 0021  
       ??_TIMER0_INITIAL 0000                _SYSTime5S 0024     __end_of_Timer2Inital 00E9  
    start_initialization 000F              __end_of_ISR 0045        __size_of_SendCtrl 0085  
            __pdataBANK0 0020   __size_of_POWER_INITIAL 0012              __pbssCOMMON 0070  
              ___latbits 0001            __pcstackBANK0 0000        interrupt_function 0004  
          _POWER_INITIAL 00FF    __size_of_Timer2Inital 001F           ?_POWER_INITIAL 0077  
               _SendCtrl 0045             _Timer2Inital 00CA            __size_of_main 0016  
           _IRSendStatus 0076  __size_of_TIMER0_INITIAL 0006          ??_POWER_INITIAL 0000  
               intlevel1 0000               _IRSendData 0075  
