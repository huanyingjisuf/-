

GNU Macro Assembler for 8 bit devices.       
                                                                                               Thu Nov 18 09:09:31 2021

GNU C Code Generator                                                 
     1                           	processor	FT61F02X
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 09/04/2020 
    24                           ; 
    25                           ; SFR Addresses
    26  0000                     
    27                           	psect	idataBANK0
    28  0000                     __pidataBANK0:	
    29  001B                     _MSCKCON	set	27
    30  0019                     _CMCON0	set	25
    31  0012                     _T2CON	set	18
    32  0011                     _TMR2	set	17
    33  000B                     _INTCON	set	11
    34  0007                     _PORTC	set	7
    35  0005                     _PORTA	set	5
    36  0001                     _TMR0	set	1
    37  0092                     _TMR2ON	set	146
    38  0061                     _TMR2IF	set	97
    39  005F                     _GIE	set	95
    40  005E                     _PEIE	set	94
    41  005D                     _T0IE	set	93
    42  005A                     _T0IF	set	90
    43  002C                     _PA4	set	44
    44  0095                     _WPUA	set	149
    45  0092                     _PR2	set	146
    46  008F                     _OSCCON	set	143
    47  0088                     _WPUC	set	136
    48  0087                     _TRISC	set	135
    49  0085                     _TRISA	set	133
    50  0081                     _OPTION	set	129
    51  0461                     _TMR2IE	set	1121
    52                           
    53                           	psect	cinit
    54  000D                     start_initialization:	
    55                           ; #config settings
    56                           
    57  000D                     __initialization:	
    58                           
    59                           ;initializer for _IRData
    60  000D  30FF               	movlw	255
    61  000E  01A0               	clrf	__pdataBANK0& (0+127)
    62  000F  00A1               	movwf	(__pdataBANK0+1)& (0+127)
    63  0010  3040               	movlw	64
    64  0011  00A2               	movwf	(__pdataBANK0+2)& (0+127)
    65  0012  30BF               	movlw	191
    66  0013  00A3               	movwf	(__pdataBANK0+3)& (0+127)
    67                           
    68                           ; Clear objects allocated to BANK0
    69  0014  01A4               	clrf	__pbssBANK0& (0+127)
    70  0015  01A5               	clrf	(__pbssBANK0+1)& (0+127)
    71  0016  01A6               	clrf	(__pbssBANK0+2)& (0+127)
    72                           
    73                           ; Clear objects allocated to COMMON
    74  0017  01F0               	clrf	__pbssCOMMON& (0+127)
    75  0018  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    76  0019  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    77  001A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    78  001B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    79  001C  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    80  001D  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    81                           
    82                           ; Clear objects allocated to BITCOMMON
    83  001E  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    84  001F                     end_of_initialization:	
    85                           ;End of C runtime variable initialization code
    86                           
    87  001F                     __end_of__initialization:	
    88  001F  0183               	clrf	3
    89  0020  28DC               	ljmp	_main	;jump to C main() function
    90                           
    91                           	psect	bitbssCOMMON
    92  03E8                     __pbitbssCOMMON:	
    93  03E8                     _SendLastBit:	
    94  03E8                     	ds	1
    95                           
    96                           	psect	bssCOMMON
    97  0070                     __pbssCOMMON:	
    98  0070                     _level1:	
    99  0070                     	ds	1
   100  0071                     _level0:	
   101  0071                     	ds	1
   102  0072                     _Sendbit:	
   103  0072                     	ds	1
   104  0073                     _TxTime:	
   105  0073                     	ds	1
   106  0074                     _TxBit:	
   107  0074                     	ds	1
   108  0075                     _IRSendData:	
   109  0075                     	ds	1
   110  0076                     _IRSendStatus:	
   111  0076                     	ds	1
   112                           
   113                           	psect	bssBANK0
   114  0024                     __pbssBANK0:	
   115  0024                     _SYSTime5S:	
   116  0024                     	ds	2
   117  0026                     _SaveLastBit:	
   118  0026                     	ds	1
   119                           
   120                           	psect	dataBANK0
   121  0020                     __pdataBANK0:	
   122  0020                     _IRData:	
   123  0020                     	ds	4
   124                           
   125                           	psect	cstackCOMMON
   126  0077                     __pcstackCOMMON:	
   127  0077                     ?_POWER_INITIAL:	
   128  0077                     ?_TIMER0_INITIAL:	
   129                           ; 1 bytes @ 0x0
   130                           
   131  0077                     ?_TIMER2_INITIAL:	
   132                           ; 1 bytes @ 0x0
   133                           
   134  0077                     ?_SendCtrl:	
   135                           ; 1 bytes @ 0x0
   136                           
   137  0077                     ??_SendCtrl:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0077                     ?_ISR:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0077                     ?_main:	
   144                           ; 1 bytes @ 0x0
   145                           
   146                           
   147                           ; 1 bytes @ 0x0
   148  0077                     	ds	3
   149  007A                     ??_ISR:	
   150                           
   151                           ; 1 bytes @ 0x3
   152  007A                     	ds	3
   153                           
   154                           	psect	cstackBANK0
   155  0000                     __pcstackBANK0:	
   156  0000                     ??_POWER_INITIAL:	
   157  0000                     ??_TIMER0_INITIAL:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0000                     ??_TIMER2_INITIAL:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0000                     ??_main:	
   164                           ; 1 bytes @ 0x0
   165                           
   166                           
   167                           	psect	maintext
   168  00DC                     __pmaintext:	
   169                           ; 1 bytes @ 0x0
   170 ;;
   171 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   172 ;;
   173 ;; *************** function _main *****************
   174 ;; Defined at:
   175 ;;		line 276 in file "test_61f02x_IR_Send.C"
   176 ;; Parameters:    Size  Location     Type
   177 ;;		None
   178 ;; Auto vars:     Size  Location     Type
   179 ;;		None
   180 ;; Return value:  Size  Location     Type
   181 ;;                  1    wreg      void 
   182 ;; Registers used:
   183 ;;		wreg, status,2, status,0, pclath, cstack
   184 ;; Tracked objects:
   185 ;;		On entry : B00/0
   186 ;;		On exit  : B00/0
   187 ;;		Unchanged: 800/0
   188 ;; Data sizes:     COMMON   BANK0   BANK1
   189 ;;      Params:         0       0       0
   190 ;;      Locals:         0       0       0
   191 ;;      Temps:          0       0       0
   192 ;;      Totals:         0       0       0
   193 ;;Total ram usage:        0 bytes
   194 ;; Hardware stack levels required when called:    3
   195 ;; This function calls:
   196 ;;		_POWER_INITIAL
   197 ;;		_TIMER0_INITIAL
   198 ;;		_TIMER2_INITIAL
   199 ;; This function is called by:
   200 ;;		Startup code after reset
   201 ;; This function uses a non-reentrant model
   202 ;;
   203                           
   204                           
   205                           ;psect for function _main
   206  00DC                     _main:	
   207                           
   208                           ;test_61f02x_IR_Send.C: 278: POWER_INITIAL();
   209                           
   210                           ;incstack = 0
   211                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   212  00DC  20C7               	fcall	_POWER_INITIAL
   213                           
   214                           ;test_61f02x_IR_Send.C: 279: TIMER0_INITIAL();
   215  00DD  20FA               	fcall	_TIMER0_INITIAL
   216                           
   217                           ;test_61f02x_IR_Send.C: 280: TIMER2_INITIAL();
   218  00DE  20EC               	fcall	_TIMER2_INITIAL
   219                           
   220                           ;test_61f02x_IR_Send.C: 281: GIE = 1;
   221  00DF  178B               	bsf	11,7	;volatile
   222  00E0                     l1894:	
   223                           
   224                           ;test_61f02x_IR_Send.C: 283: {
   225                           ;test_61f02x_IR_Send.C: 284: if(SYSTime5S >10000)
   226  00E0  3027               	movlw	39
   227  00E1  0225               	subwf	_SYSTime5S+1,w
   228  00E2  3011               	movlw	17
   229  00E3  1903               	skipnz
   230  00E4  0224               	subwf	_SYSTime5S,w
   231  00E5  1C03               	skipc
   232  00E6  28E0               	goto	l1894
   233                           
   234                           ;test_61f02x_IR_Send.C: 285: {
   235                           ;test_61f02x_IR_Send.C: 286: SYSTime5S = 0;
   236  00E7  01A4               	clrf	_SYSTime5S
   237  00E8  01A5               	clrf	_SYSTime5S+1
   238                           
   239                           ;test_61f02x_IR_Send.C: 287: IRSendStatus = 1;
   240  00E9  01F6               	clrf	_IRSendStatus
   241  00EA  0AF6               	incf	_IRSendStatus,f
   242  00EB  28E0               	goto	l1894
   243  00EC                     __end_of_main:	
   244                           
   245                           	psect	text1
   246  00EC                     __ptext1:	
   247 ;; *************** function _TIMER2_INITIAL *****************
   248 ;; Defined at:
   249 ;;		line 105 in file "test_61f02x_IR_Send.C"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;		None
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2
   258 ;; Tracked objects:
   259 ;;		On entry : B00/0
   260 ;;		On exit  : B00/0
   261 ;;		Unchanged: 800/0
   262 ;; Data sizes:     COMMON   BANK0   BANK1
   263 ;;      Params:         0       0       0
   264 ;;      Locals:         0       0       0
   265 ;;      Temps:          0       0       0
   266 ;;      Totals:         0       0       0
   267 ;;Total ram usage:        0 bytes
   268 ;; Hardware stack levels used:    1
   269 ;; Hardware stack levels required when called:    2
   270 ;; This function calls:
   271 ;;		Nothing
   272 ;; This function is called by:
   273 ;;		_main
   274 ;; This function uses a non-reentrant model
   275 ;;
   276                           
   277                           
   278                           ;psect for function _TIMER2_INITIAL
   279  00EC                     _TIMER2_INITIAL:	
   280                           
   281                           ;test_61f02x_IR_Send.C: 108: T2CON = 0B00011001;
   282                           
   283                           ;incstack = 0
   284                           ; Regs used in _TIMER2_INITIAL: [wreg+status,2]
   285  00EC  3019               	movlw	25
   286  00ED  0092               	movwf	18	;volatile
   287                           
   288                           ;test_61f02x_IR_Send.C: 111: TMR2 = 0;
   289  00EE  0191               	clrf	17	;volatile
   290                           
   291                           ;test_61f02x_IR_Send.C: 112: PR2 = 140;
   292  00EF  308C               	movlw	140
   293  00F0  1683               	bsf	3,5	;RP0=1, select bank1
   294  00F1  0092               	movwf	18	;volatile
   295                           
   296                           ;test_61f02x_IR_Send.C: 113: TMR2IF = 0;
   297  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   298  00F3  108C               	bcf	12,1	;volatile
   299                           
   300                           ;test_61f02x_IR_Send.C: 114: TMR2IE = 1;
   301  00F4  1683               	bsf	3,5	;RP0=1, select bank1
   302  00F5  148C               	bsf	12,1	;volatile
   303                           
   304                           ;test_61f02x_IR_Send.C: 115: TMR2ON = 1;
   305  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   306  00F7  1512               	bsf	18,2	;volatile
   307                           
   308                           ;test_61f02x_IR_Send.C: 116: PEIE=1;
   309  00F8  170B               	bsf	11,6	;volatile
   310  00F9  0008               	return
   311  00FA                     __end_of_TIMER2_INITIAL:	
   312                           
   313                           	psect	text2
   314  00FA                     __ptext2:	
   315 ;; *************** function _TIMER0_INITIAL *****************
   316 ;; Defined at:
   317 ;;		line 88 in file "test_61f02x_IR_Send.C"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;		None
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, status,2
   326 ;; Tracked objects:
   327 ;;		On entry : B00/0
   328 ;;		On exit  : B00/0
   329 ;;		Unchanged: 800/0
   330 ;; Data sizes:     COMMON   BANK0   BANK1
   331 ;;      Params:         0       0       0
   332 ;;      Locals:         0       0       0
   333 ;;      Temps:          0       0       0
   334 ;;      Totals:         0       0       0
   335 ;;Total ram usage:        0 bytes
   336 ;; Hardware stack levels used:    1
   337 ;; Hardware stack levels required when called:    2
   338 ;; This function calls:
   339 ;;		Nothing
   340 ;; This function is called by:
   341 ;;		_main
   342 ;; This function uses a non-reentrant model
   343 ;;
   344                           
   345                           
   346                           ;psect for function _TIMER0_INITIAL
   347  00FA                     _TIMER0_INITIAL:	
   348                           
   349                           ;test_61f02x_IR_Send.C: 90: OPTION = 0B00000000;
   350                           
   351                           ;incstack = 0
   352                           ; Regs used in _TIMER0_INITIAL: [wreg+status,2]
   353  00FA  1683               	bsf	3,5	;RP0=1, select bank1
   354  00FB  0181               	clrf	1	;volatile
   355                           
   356                           ;test_61f02x_IR_Send.C: 96: TMR0 = 239;
   357  00FC  30EF               	movlw	239
   358  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   359  00FE  0081               	movwf	1	;volatile
   360                           
   361                           ;test_61f02x_IR_Send.C: 97: T0IF = 0;
   362  00FF  110B               	bcf	11,2	;volatile
   363  0100  0008               	return
   364  0101                     __end_of_TIMER0_INITIAL:	
   365                           
   366                           	psect	text3
   367  00C7                     __ptext3:	
   368 ;; *************** function _POWER_INITIAL *****************
   369 ;; Defined at:
   370 ;;		line 60 in file "test_61f02x_IR_Send.C"
   371 ;; Parameters:    Size  Location     Type
   372 ;;		None
   373 ;; Auto vars:     Size  Location     Type
   374 ;;		None
   375 ;; Return value:  Size  Location     Type
   376 ;;                  1    wreg      void 
   377 ;; Registers used:
   378 ;;		wreg, status,2
   379 ;; Tracked objects:
   380 ;;		On entry : B00/0
   381 ;;		On exit  : B00/0
   382 ;;		Unchanged: 800/0
   383 ;; Data sizes:     COMMON   BANK0   BANK1
   384 ;;      Params:         0       0       0
   385 ;;      Locals:         0       0       0
   386 ;;      Temps:          0       0       0
   387 ;;      Totals:         0       0       0
   388 ;;Total ram usage:        0 bytes
   389 ;; Hardware stack levels used:    1
   390 ;; Hardware stack levels required when called:    2
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           
   399                           ;psect for function _POWER_INITIAL
   400  00C7                     _POWER_INITIAL:	
   401                           
   402                           ;test_61f02x_IR_Send.C: 62: OSCCON = 0B01110001;
   403                           
   404                           ;incstack = 0
   405                           ; Regs used in _POWER_INITIAL: [wreg+status,2]
   406  00C7  3071               	movlw	113
   407  00C8  1683               	bsf	3,5	;RP0=1, select bank1
   408  00C9  008F               	movwf	15	;volatile
   409                           
   410                           ;test_61f02x_IR_Send.C: 63: INTCON = 0;
   411  00CA  018B               	clrf	11	;volatile
   412                           
   413                           ;test_61f02x_IR_Send.C: 64: PORTA = 0B00000000;
   414  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   415  00CC  0185               	clrf	5	;volatile
   416                           
   417                           ;test_61f02x_IR_Send.C: 65: TRISA = 0B00000000;
   418  00CD  1683               	bsf	3,5	;RP0=1, select bank1
   419  00CE  0185               	clrf	5	;volatile
   420                           
   421                           ;test_61f02x_IR_Send.C: 67: PORTC = 0B00000000;
   422  00CF  1283               	bcf	3,5	;RP0=0, select bank0
   423  00D0  0187               	clrf	7	;volatile
   424                           
   425                           ;test_61f02x_IR_Send.C: 68: TRISC = 0B00000000;
   426  00D1  1683               	bsf	3,5	;RP0=1, select bank1
   427  00D2  0187               	clrf	7	;volatile
   428                           
   429                           ;test_61f02x_IR_Send.C: 69: WPUA = 0B00000000;
   430  00D3  0195               	clrf	21	;volatile
   431                           
   432                           ;test_61f02x_IR_Send.C: 70: WPUC = 0B00000000;
   433  00D4  0188               	clrf	8	;volatile
   434                           
   435                           ;test_61f02x_IR_Send.C: 72: OPTION = 0B00001000;
   436  00D5  3008               	movlw	8
   437  00D6  0081               	movwf	1	;volatile
   438                           
   439                           ;test_61f02x_IR_Send.C: 73: MSCKCON = 0B00000000;
   440  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   441  00D8  019B               	clrf	27	;volatile
   442                           
   443                           ;test_61f02x_IR_Send.C: 77: CMCON0 = 0B00000111;
   444  00D9  3007               	movlw	7
   445  00DA  0099               	movwf	25	;volatile
   446  00DB  0008               	return
   447  00DC                     __end_of_POWER_INITIAL:	
   448                           
   449                           	psect	text4
   450  00A6                     __ptext4:	
   451 ;; *************** function _ISR *****************
   452 ;; Defined at:
   453 ;;		line 249 in file "test_61f02x_IR_Send.C"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 200/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1
   467 ;;      Params:         0       0       0
   468 ;;      Locals:         0       0       0
   469 ;;      Temps:          3       0       0
   470 ;;      Totals:         3       0       0
   471 ;;Total ram usage:        3 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    1
   474 ;; This function calls:
   475 ;;		_SendCtrl
   476 ;; This function is called by:
   477 ;;		Interrupt level 1
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           
   482                           ;psect for function _ISR
   483  00A6                     _ISR:	
   484                           
   485                           ;test_61f02x_IR_Send.C: 253: if(T0IE && T0IF)
   486  00A6  1A8B               	btfsc	11,5	;volatile
   487  00A7  1D0B               	btfss	11,2	;volatile
   488  00A8  28B0               	goto	i1l1830
   489                           
   490                           ;test_61f02x_IR_Send.C: 254: {
   491                           ;test_61f02x_IR_Send.C: 255: TMR0 = 239;
   492  00A9  30EF               	movlw	239
   493  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   494  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   495  00AC  0081               	movwf	1	;volatile
   496                           
   497                           ;test_61f02x_IR_Send.C: 256: T0IF = 0;
   498  00AD  110B               	bcf	11,2	;volatile
   499                           
   500                           ;test_61f02x_IR_Send.C: 257: PA4 = ~PA4;
   501  00AE  3010               	movlw	16
   502  00AF  0685               	xorwf	5,f
   503  00B0                     i1l1830:	
   504                           
   505                           ;test_61f02x_IR_Send.C: 258: }
   506                           ;test_61f02x_IR_Send.C: 261: if(TMR2IE && TMR2IF)
   507  00B0  1683               	bsf	3,5	;RP0=1, select bank1
   508  00B1  1303               	bcf	3,6	;RP1=0, select bank1
   509  00B2  1C8C               	btfss	12,1	;volatile
   510  00B3  28BE               	goto	i1l1133
   511  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   512  00B5  1C8C               	btfss	12,1	;volatile
   513  00B6  28BE               	goto	i1l1133
   514                           
   515                           ;test_61f02x_IR_Send.C: 262: {
   516                           ;test_61f02x_IR_Send.C: 263: TMR2IF = 0;
   517  00B7  108C               	bcf	12,1	;volatile
   518                           
   519                           ;test_61f02x_IR_Send.C: 264: SendCtrl();
   520  00B8  2021               	fcall	_SendCtrl
   521                           
   522                           ;test_61f02x_IR_Send.C: 265: SYSTime5S++;
   523  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   524  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   525  00BB  0AA4               	incf	_SYSTime5S,f
   526  00BC  1903               	skipnz
   527  00BD  0AA5               	incf	_SYSTime5S+1,f
   528  00BE                     i1l1133:	
   529  00BE  087C               	movf	??_ISR+2,w
   530  00BF  008A               	movwf	10
   531  00C0  087B               	movf	??_ISR+1,w
   532  00C1  0084               	movwf	4
   533  00C2  0E7A               	swapf	??_ISR^(0+-128),w
   534  00C3  0083               	movwf	3
   535  00C4  0EFE               	swapf	126,f
   536  00C5  0E7E               	swapf	126,w
   537  00C6  0009               	retfie
   538  00C7                     __end_of_ISR:	
   539                           
   540                           	psect	intentry
   541  0004                     __pintentry:	
   542                           ;incstack = 0
   543                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   544                           
   545  0004                     interrupt_function:	
   546  007E                     saved_w	set	btemp
   547  0004  00FE               	movwf	btemp
   548  0005  0E03               	swapf	3,w
   549  0006  00FA               	movwf	??_ISR
   550  0007  0804               	movf	4,w
   551  0008  00FB               	movwf	??_ISR+1
   552  0009  080A               	movf	10,w
   553  000A  00FC               	movwf	??_ISR+2
   554  000B  28A6               	ljmp	_ISR
   555                           
   556                           	psect	text5
   557  0021                     __ptext5:	
   558 ;; *************** function _SendCtrl *****************
   559 ;; Defined at:
   560 ;;		line 126 in file "test_61f02x_IR_Send.C"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 300/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1
   574 ;;      Params:         0       0       0
   575 ;;      Locals:         0       0       0
   576 ;;      Temps:          3       0       0
   577 ;;      Totals:         3       0       0
   578 ;;Total ram usage:        3 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_ISR
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           
   588                           ;psect for function _SendCtrl
   589  0021                     _SendCtrl:	
   590                           
   591                           ;test_61f02x_IR_Send.C: 129: if (IRSendStatus == 0)
   592                           
   593                           ;incstack = 0
   594                           ; Regs used in _SendCtrl: [wreg-fsr0h+status,2+status,0]
   595  0021  0876               	movf	_IRSendStatus,w
   596  0022  1D03               	btfss	3,2
   597  0023  2828               	goto	i1l1730
   598                           
   599                           ;test_61f02x_IR_Send.C: 130: {
   600                           ;test_61f02x_IR_Send.C: 131: T0IE = 0;
   601  0024  128B               	bcf	11,5	;volatile
   602                           
   603                           ;test_61f02x_IR_Send.C: 132: Sendbit = 0;
   604  0025  01F2               	clrf	_Sendbit
   605                           
   606                           ;test_61f02x_IR_Send.C: 133: TxTime = 0;
   607  0026  01F3               	clrf	_TxTime
   608                           
   609                           ;test_61f02x_IR_Send.C: 135: }
   610  0027  0008               	return
   611  0028                     i1l1730:	
   612                           
   613                           ;test_61f02x_IR_Send.C: 136: else if (IRSendStatus == 1)
   614  0028  0B76               	decfsz	_IRSendStatus,w
   615  0029  283F               	goto	i1l1750
   616  002A  3011               	movlw	17
   617                           
   618                           ;test_61f02x_IR_Send.C: 137: {
   619                           ;test_61f02x_IR_Send.C: 138: TxTime++;
   620  002B  0AF3               	incf	_TxTime,f
   621                           
   622                           ;test_61f02x_IR_Send.C: 139: if (TxTime < 17)
   623  002C  0273               	subwf	_TxTime,w
   624  002D  1803               	skipnc
   625  002E  2831               	goto	i1l1738
   626                           
   627                           ;test_61f02x_IR_Send.C: 140: {
   628                           ;test_61f02x_IR_Send.C: 141: T0IE = 1;
   629  002F  168B               	bsf	11,5	;volatile
   630                           
   631                           ;test_61f02x_IR_Send.C: 142: }
   632  0030  283A               	goto	i1l1746
   633  0031                     i1l1738:	
   634                           
   635                           ;test_61f02x_IR_Send.C: 143: else if (TxTime < 24)
   636  0031  3018               	movlw	24
   637  0032  0273               	subwf	_TxTime,w
   638  0033  1803               	skipnc
   639  0034  2837               	goto	i1l1742
   640                           
   641                           ;test_61f02x_IR_Send.C: 144: {
   642                           ;test_61f02x_IR_Send.C: 145: T0IE = 0;
   643  0035  128B               	bcf	11,5	;volatile
   644                           
   645                           ;test_61f02x_IR_Send.C: 146: }
   646  0036  283A               	goto	i1l1746
   647  0037                     i1l1742:	
   648  0037  3002               	movlw	2
   649                           
   650                           ;test_61f02x_IR_Send.C: 147: else
   651                           ;test_61f02x_IR_Send.C: 148: {
   652                           ;test_61f02x_IR_Send.C: 149: TxTime = 0;
   653  0038  01F3               	clrf	_TxTime
   654                           
   655                           ;test_61f02x_IR_Send.C: 150: IRSendStatus = 2;
   656  0039  00F6               	movwf	_IRSendStatus
   657  003A                     i1l1746:	
   658                           
   659                           ;test_61f02x_IR_Send.C: 151: }
   660                           ;test_61f02x_IR_Send.C: 152: IRSendData = IRData[0];
   661  003A  0820               	movf	_IRData,w
   662  003B  00F5               	movwf	_IRSendData
   663                           
   664                           ;test_61f02x_IR_Send.C: 153: TxBit = 0x01;
   665  003C  01F4               	clrf	_TxBit
   666  003D  0AF4               	incf	_TxBit,f
   667                           
   668                           ;test_61f02x_IR_Send.C: 154: }
   669  003E  0008               	return
   670  003F                     i1l1750:	
   671                           
   672                           ;test_61f02x_IR_Send.C: 155: else if(IRSendStatus == 2)
   673  003F  3002               	movlw	2
   674  0040  0676               	xorwf	_IRSendStatus,w
   675  0041  1D03               	btfss	3,2
   676  0042  0008               	return
   677                           
   678                           ;test_61f02x_IR_Send.C: 156: {
   679                           ;test_61f02x_IR_Send.C: 157: if (IRSendData & TxBit)
   680  0043  0875               	movf	_IRSendData,w
   681  0044  0574               	andwf	_TxBit,w
   682  0045  1903               	btfsc	3,2
   683  0046  284C               	goto	i1l1105
   684  0047  3003               	movlw	3
   685                           
   686                           ;test_61f02x_IR_Send.C: 158: {
   687                           ;test_61f02x_IR_Send.C: 159: level1 = 1;
   688  0048  01F0               	clrf	_level1
   689  0049  0AF0               	incf	_level1,f
   690                           
   691                           ;test_61f02x_IR_Send.C: 160: level0 = 3;
   692  004A  00F1               	movwf	_level0
   693                           
   694                           ;test_61f02x_IR_Send.C: 161: }
   695  004B  2850               	goto	i1l1758
   696  004C                     i1l1105:	
   697                           
   698                           ;test_61f02x_IR_Send.C: 162: else
   699                           ;test_61f02x_IR_Send.C: 163: {
   700                           ;test_61f02x_IR_Send.C: 164: level1 = 1;
   701  004C  01F0               	clrf	_level1
   702  004D  0AF0               	incf	_level1,f
   703                           
   704                           ;test_61f02x_IR_Send.C: 165: level0 = 1;
   705  004E  01F1               	clrf	_level0
   706  004F  0AF1               	incf	_level0,f
   707  0050                     i1l1758:	
   708                           
   709                           ;test_61f02x_IR_Send.C: 166: }
   710                           ;test_61f02x_IR_Send.C: 167: TxTime++;
   711  0050  0AF3               	incf	_TxTime,f
   712                           
   713                           ;test_61f02x_IR_Send.C: 168: if (TxTime <= level1)
   714  0051  0873               	movf	_TxTime,w
   715  0052  0270               	subwf	_level1,w
   716  0053  1C03               	skipc
   717  0054  2857               	goto	i1l1764
   718  0055                     i1l1762:	
   719                           
   720                           ;test_61f02x_IR_Send.C: 169: {
   721                           ;test_61f02x_IR_Send.C: 170: T0IE = 1;
   722  0055  168B               	bsf	11,5	;volatile
   723                           
   724                           ;test_61f02x_IR_Send.C: 171: }
   725  0056  0008               	return
   726  0057                     i1l1764:	
   727                           
   728                           ;test_61f02x_IR_Send.C: 172: else if (TxTime <= (level0+level1))
   729  0057  0871               	movf	_level0,w
   730  0058  0770               	addwf	_level1,w
   731  0059  00F7               	movwf	??_SendCtrl
   732  005A  01F8               	clrf	??_SendCtrl+1
   733  005B  0DF8               	rlf	??_SendCtrl+1,f
   734  005C  0878               	movf	??_SendCtrl+1,w
   735  005D  3A80               	xorlw	128
   736  005E  00F9               	movwf	??_SendCtrl+2
   737  005F  3080               	movlw	128
   738  0060  0279               	subwf	??_SendCtrl+2,w
   739  0061  1D03               	skipz
   740  0062  2865               	goto	u30_25
   741  0063  0873               	movf	_TxTime,w
   742  0064  0277               	subwf	??_SendCtrl,w
   743  0065                     u30_25:	
   744  0065  1C03               	skipc
   745  0066  2869               	goto	i1l1768
   746  0067                     i1l1766:	
   747                           
   748                           ;test_61f02x_IR_Send.C: 173: {
   749                           ;test_61f02x_IR_Send.C: 174: T0IE = 0;
   750  0067  128B               	bcf	11,5	;volatile
   751                           
   752                           ;test_61f02x_IR_Send.C: 175: }
   753  0068  0008               	return
   754  0069                     i1l1768:	
   755                           
   756                           ;test_61f02x_IR_Send.C: 176: else if (Sendbit < 4)
   757  0069  3004               	movlw	4
   758  006A  0272               	subwf	_Sendbit,w
   759  006B  1803               	skipnc
   760  006C  2889               	goto	i1l1111
   761                           
   762                           ;test_61f02x_IR_Send.C: 177: {
   763                           ;test_61f02x_IR_Send.C: 178: TxTime = 1;
   764  006D  01F3               	clrf	_TxTime
   765  006E  0AF3               	incf	_TxTime,f
   766                           
   767                           ;test_61f02x_IR_Send.C: 179: T0IE = 1;
   768  006F  168B               	bsf	11,5	;volatile
   769                           
   770                           ;test_61f02x_IR_Send.C: 180: SaveLastBit = IRSendData & TxBit;
   771  0070  0875               	movf	_IRSendData,w
   772  0071  1283               	bcf	3,5	;RP0=0, select bank0
   773  0072  1303               	bcf	3,6	;RP1=0, select bank0
   774  0073  00A6               	movwf	_SaveLastBit
   775  0074  0874               	movf	_TxBit,w
   776  0075  05A6               	andwf	_SaveLastBit,f
   777                           
   778                           ;test_61f02x_IR_Send.C: 181: TxBit <<= 1;
   779  0076  1003               	clrc
   780  0077  0DF4               	rlf	_TxBit,f
   781                           
   782                           ;test_61f02x_IR_Send.C: 182: if (TxBit == 0x00)
   783  0078  0874               	movf	_TxBit,w
   784  0079  1D03               	btfss	3,2
   785  007A  0008               	return
   786                           
   787                           ;test_61f02x_IR_Send.C: 183: {
   788                           ;test_61f02x_IR_Send.C: 184: TxBit = 0x01;
   789  007B  01F4               	clrf	_TxBit
   790  007C  0AF4               	incf	_TxBit,f
   791                           
   792                           ;test_61f02x_IR_Send.C: 185: Sendbit++;
   793  007D  0AF2               	incf	_Sendbit,f
   794                           
   795                           ;test_61f02x_IR_Send.C: 186: IRSendData = IRData[Sendbit];
   796  007E  0872               	movf	_Sendbit,w
   797  007F  3E20               	addlw	(low (_IRData| 0))& (0+255)
   798  0080  0084               	movwf	4
   799  0081  1383               	bcf	3,7	;select IRP bank0
   800  0082  0800               	movf	0,w
   801  0083  00F5               	movwf	_IRSendData
   802                           
   803                           ;test_61f02x_IR_Send.C: 187: if (Sendbit > 3)
   804  0084  3004               	movlw	4
   805  0085  0272               	subwf	_Sendbit,w
   806  0086  1803               	btfsc	3,0
   807                           
   808                           ;test_61f02x_IR_Send.C: 188: {
   809                           ;test_61f02x_IR_Send.C: 189: SendLastBit = 1;
   810  0087  147D               	bsf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   811  0088  0008               	return
   812  0089                     i1l1111:	
   813                           
   814                           ;test_61f02x_IR_Send.C: 193: else
   815                           ;test_61f02x_IR_Send.C: 194: {
   816                           ;test_61f02x_IR_Send.C: 195: if(SendLastBit)
   817  0089  1C7D               	btfss	_SendLastBit/(0+8),_SendLastBit& (0+7)
   818  008A  0008               	return
   819                           
   820                           ;test_61f02x_IR_Send.C: 196: {
   821                           ;test_61f02x_IR_Send.C: 197: TxTime++;
   822  008B  0AF3               	incf	_TxTime,f
   823                           
   824                           ;test_61f02x_IR_Send.C: 198: if(SaveLastBit)
   825  008C  1283               	bcf	3,5	;RP0=0, select bank0
   826  008D  1303               	bcf	3,6	;RP1=0, select bank0
   827  008E  0826               	movf	_SaveLastBit,w
   828  008F  1903               	btfsc	3,2
   829  0090  28A0               	goto	i1l1808
   830                           
   831                           ;test_61f02x_IR_Send.C: 199: {
   832                           ;test_61f02x_IR_Send.C: 200: if(TxTime < 3)
   833  0091  3003               	movlw	3
   834  0092  0273               	subwf	_TxTime,w
   835  0093  1C03               	btfss	3,0
   836  0094  2867               	goto	i1l1766
   837                           
   838                           ;test_61f02x_IR_Send.C: 204: else if(TxTime < 4)
   839  0095  3004               	movlw	4
   840  0096                     L1:	
   841  0096  0273               	subwf	_TxTime,w
   842  0097  1C03               	btfss	3,0
   843  0098  2855               	goto	i1l1762
   844                           
   845                           ;test_61f02x_IR_Send.C: 208: else
   846                           ;test_61f02x_IR_Send.C: 209: {
   847                           ;test_61f02x_IR_Send.C: 210: T0IE = 0;
   848  0099  128B               	bcf	11,5	;volatile
   849                           
   850                           ;test_61f02x_IR_Send.C: 211: IRSendStatus = 0;
   851  009A  01F6               	clrf	_IRSendStatus
   852                           
   853                           ;test_61f02x_IR_Send.C: 212: T0IE = 0;
   854  009B  128B               	bcf	11,5	;volatile
   855                           
   856                           ;test_61f02x_IR_Send.C: 213: SendLastBit = 0;
   857  009C  107D               	bcf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   858                           
   859                           ;test_61f02x_IR_Send.C: 214: TxBit = 0;
   860  009D  01F4               	clrf	_TxBit
   861                           
   862                           ;test_61f02x_IR_Send.C: 215: TxTime = 0;
   863  009E  01F3               	clrf	_TxTime
   864  009F  0008               	return
   865  00A0                     i1l1808:	
   866                           
   867                           ;test_61f02x_IR_Send.C: 218: else
   868                           ;test_61f02x_IR_Send.C: 219: {
   869                           ;test_61f02x_IR_Send.C: 220: if(TxTime < 5)
   870  00A0  3005               	movlw	5
   871  00A1  0273               	subwf	_TxTime,w
   872  00A2  1C03               	btfss	3,0
   873  00A3  2867               	goto	i1l1766
   874                           
   875                           ;test_61f02x_IR_Send.C: 224: else if(TxTime < 6)
   876  00A4  3006               	movlw	6
   877  00A5  2896               	goto	L1
   878  00A6                     __end_of_SendCtrl:	
   879  007E                     btemp	set	126	;btemp
   880  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      14
    BANK0            80      0       7
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SendCtrl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                      _POWER_INITIAL
                     _TIMER0_INITIAL
                     _TIMER2_INITIAL
 ---------------------------------------------------------------------------------
 (1) _TIMER2_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              3 COMMON     3     3      0
                           _SendCtrl
 ---------------------------------------------------------------------------------
 (3) _SendCtrl                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _POWER_INITIAL
   _TIMER0_INITIAL
   _TIMER2_INITIAL

 _ISR (ROOT)
   _SendCtrl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       7       4        8.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      15       8        0.0%
ABS                  0      0      15       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Thu Nov 18 09:09:31 2021

                    _GIE 005F                      _PA4 002C                      _PR2 0092  
                    _ISR 00A6                      fsr0 0004                      indf 0000  
                   ?_ISR 0077                     l1894 00E0                     _T0IE 005D  
                   _T0IF 005A                     _PEIE 005E                     _TMR0 0001  
                   _TMR2 0011                     _WPUA 0095                     _WPUC 0088  
                   _main 00DC                     btemp 007E                     start 000C  
                  ??_ISR 007A           _TIMER0_INITIAL 00FA                    ?_main 0077  
         _TIMER2_INITIAL 00EC                    _T2CON 0012                    u30_25 0065  
                  _PORTA 0005                    _PORTC 0007                    _TRISA 0085  
                  _TRISC 0087                    _TxBit 0074           __pbitbssCOMMON 03E8  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000D             __end_of_main 00EC   __end_of_TIMER0_INITIAL 0101  
 __end_of_TIMER2_INITIAL 00FA                   ??_main 0000         __end_of_SendCtrl 00A6  
                 _CMCON0 0019                   i1l1111 0089                   i1l1105 004C  
                 i1l1133 00BE                   i1l1730 0028                   i1l1742 0037  
                 i1l1750 003F                   i1l1830 00B0                   i1l1808 00A0  
                 i1l1762 0055                   i1l1746 003A                   i1l1738 0031  
                 i1l1764 0057                   i1l1766 0067                   i1l1758 0050  
                 i1l1768 0069                   _INTCON 000B                   _OSCCON 008F  
                 _IRData 0020                   _TMR2IE 0461                   _TMR2IF 0061  
                 _OPTION 0081                   _TMR2ON 0092                   _TxTime 0073  
        ?_TIMER0_INITIAL 0077                   _level0 0071                   _level1 0070  
        ?_TIMER2_INITIAL 0077                   saved_w 007E    __end_of_POWER_INITIAL 00DC  
__end_of__initialization 001F           __pcstackCOMMON 0077             __pidataBANK0 0000  
             __pbssBANK0 0024                ?_SendCtrl 0077               __pmaintext 00DC  
            _SendLastBit 03E8               __pintentry 0004              _SaveLastBit 0026  
                _MSCKCON 001B               ??_SendCtrl 0077                  _Sendbit 0072  
                __ptext1 00EC                  __ptext2 00FA                  __ptext3 00C7  
                __ptext4 00A6                  __ptext5 0021             __size_of_ISR 0021  
   end_of_initialization 001F         ??_TIMER0_INITIAL 0000         ??_TIMER2_INITIAL 0000  
              _SYSTime5S 0024      start_initialization 000D              __end_of_ISR 00C7  
      __size_of_SendCtrl 0085              __pdataBANK0 0020   __size_of_POWER_INITIAL 0015  
            __pbssCOMMON 0070                ___latbits 0000            __pcstackBANK0 0000  
      interrupt_function 0004            _POWER_INITIAL 00C7           ?_POWER_INITIAL 0077  
               _SendCtrl 0021            __size_of_main 0010             _IRSendStatus 0076  
__size_of_TIMER0_INITIAL 0007  __size_of_TIMER2_INITIAL 000E          ??_POWER_INITIAL 0000  
               intlevel1 0000               _IRSendData 0075  
