

GNU Macro Assembler for 8 bit devices.       
                                                                                               Thu Nov 11 16:19:32 2021

GNU C Code Generator                                                 
     1                           	processor	FT61F02X
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	pa_nodes0,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 09/04/2020 
    21                           ; 
    22                           ; SFR Addresses
    23  0000                     
    24                           	psect	nvCOMMON
    25  0076                     __pnvCOMMON:	
    26  0076                     _SPIReadData:	
    27  0076                     	ds	1
    28  001B                     _MSCKCON	set	27
    29  0019                     _CMCON0	set	25
    30  000B                     _INTCON	set	11
    31  0007                     _PORTC	set	7
    32  0005                     _PORTA	set	5
    33  002F                     _PA7	set	47
    34  002E                     _PA6	set	46
    35  002C                     _PA4	set	44
    36  002A                     _PA2	set	42
    37  0095                     _WPUA	set	149
    38  0091                     _ANSEL	set	145
    39  008F                     _OSCCON	set	143
    40  0088                     _WPUC	set	136
    41  0087                     _TRISC	set	135
    42  0085                     _TRISA	set	133
    43  0081                     _OPTION	set	129
    44                           
    45                           	psect	cinit
    46  07FE                     start_initialization:	
    47                           ; #config settings
    48                           
    49  07FE                     __initialization:	
    50  07FE                     end_of_initialization:	
    51                           ;End of C runtime variable initialization code
    52                           
    53  07FE                     __end_of__initialization:	
    54  07FE  0183               	clrf	3
    55  07FF  2F93               	ljmp	_main	;jump to C main() function
    56                           
    57                           	psect	cstackCOMMON
    58  0070                     __pcstackCOMMON:	
    59  0070                     ?_POWER_INITIAL:	
    60  0070                     ??_POWER_INITIAL:	
    61                           ; 1 bytes @ 0x0
    62                           
    63  0070                     ?_init_25c64_io:	
    64                           ; 1 bytes @ 0x0
    65                           
    66  0070                     ??_init_25c64_io:	
    67                           ; 1 bytes @ 0x0
    68                           
    69  0070                     ?_SPI_RW:	
    70                           ; 1 bytes @ 0x0
    71                           
    72  0070                     ??_SPI_RW:	
    73                           ; 1 bytes @ 0x0
    74                           
    75  0070                     ?_WriteEnable:	
    76                           ; 1 bytes @ 0x0
    77                           
    78  0070                     ?_WriteDisable:	
    79                           ; 1 bytes @ 0x0
    80                           
    81  0070                     ?_SPI_ReadStatus:	
    82                           ; 1 bytes @ 0x0
    83                           
    84  0070                     ?_main:	
    85                           ; 1 bytes @ 0x0
    86                           
    87  0070                     SPI_RW@i:	
    88                           ; 1 bytes @ 0x0
    89                           
    90                           
    91                           ; 1 bytes @ 0x0
    92  0070                     	ds	1
    93  0071                     SPI_RW@data:	
    94                           
    95                           ; 1 bytes @ 0x1
    96  0071                     	ds	1
    97  0072                     ??_WriteEnable:	
    98  0072                     ??_WriteDisable:	
    99                           ; 1 bytes @ 0x2
   100                           
   101  0072                     ??_SPI_ReadStatus:	
   102                           ; 1 bytes @ 0x2
   103                           
   104  0072                     SPI_ReadStatus@status:	
   105                           ; 1 bytes @ 0x2
   106                           
   107                           
   108                           ; 1 bytes @ 0x2
   109  0072                     	ds	1
   110  0073                     ?_SPI_Read:	
   111  0073                     ?_SPI_Write:	
   112                           ; 1 bytes @ 0x3
   113                           
   114  0073                     SPI_Read@addr:	
   115                           ; 1 bytes @ 0x3
   116                           
   117  0073                     SPI_Write@addr:	
   118                           ; 2 bytes @ 0x3
   119                           
   120                           
   121                           ; 2 bytes @ 0x3
   122  0073                     	ds	2
   123  0075                     ??_SPI_Read:	
   124  0075                     SPI_Read@spidata:	
   125                           ; 1 bytes @ 0x5
   126                           
   127  0075                     SPI_Write@dat:	
   128                           ; 1 bytes @ 0x5
   129                           
   130                           
   131                           ; 1 bytes @ 0x5
   132  0075                     	ds	1
   133  0076                     ??_SPI_Write:	
   134  0076                     ??_main:	
   135                           ; 1 bytes @ 0x6
   136                           
   137                           
   138                           	psect	maintext
   139  0793                     __pmaintext:	
   140                           ; 1 bytes @ 0x6
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 191 in file "test_61f02x_SPI.C"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;		None
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0, pclath, cstack
   155 ;; Tracked objects:
   156 ;;		On entry : B00/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMMON   BANK0   BANK1
   160 ;;      Params:         0       0       0
   161 ;;      Locals:         0       0       0
   162 ;;      Temps:          0       0       0
   163 ;;      Totals:         0       0       0
   164 ;;Total ram usage:        0 bytes
   165 ;; Hardware stack levels required when called:    3
   166 ;; This function calls:
   167 ;;		_POWER_INITIAL
   168 ;;		_SPI_Read
   169 ;;		_SPI_Write
   170 ;;		_init_25c64_io
   171 ;; This function is called by:
   172 ;;		Startup code after reset
   173 ;; This function uses a non-reentrant model
   174 ;;
   175                           
   176                           
   177                           ;psect for function _main
   178  0793                     _main:	
   179                           
   180                           ;test_61f02x_SPI.C: 193: POWER_INITIAL();
   181                           
   182                           ;incstack = 0
   183                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   184  0793  27C7               	fcall	_POWER_INITIAL
   185                           
   186                           ;test_61f02x_SPI.C: 194: init_25c64_io();
   187  0794  277D               	fcall	_init_25c64_io
   188                           
   189                           ;test_61f02x_SPI.C: 195: SPIReadData = SPI_Read(0x0012);
   190  0795  3012               	movlw	18
   191  0796  00F3               	movwf	SPI_Read@addr
   192  0797  01F4               	clrf	SPI_Read@addr+1
   193  0798  27A2               	fcall	_SPI_Read
   194  0799  00F6               	movwf	_SPIReadData
   195                           
   196                           ;test_61f02x_SPI.C: 196: SPI_Write(0x0013,~SPIReadData);
   197  079A  3013               	movlw	19
   198  079B  00F3               	movwf	SPI_Write@addr
   199  079C  01F4               	clrf	SPI_Write@addr+1
   200  079D  0976               	comf	_SPIReadData,w
   201  079E  00F5               	movwf	SPI_Write@dat
   202  079F  27B2               	fcall	_SPI_Write
   203  07A0                     l1622:	
   204                           
   205                           ;test_61f02x_SPI.C: 198: {
   206                           ;test_61f02x_SPI.C: 199: __nop();
   207  07A0  0000               	nop
   208  07A1  2FA0               	goto	l1622
   209  07A2                     __end_of_main:	
   210                           
   211                           	psect	text1
   212  077D                     __ptext1:	
   213 ;; *************** function _init_25c64_io *****************
   214 ;; Defined at:
   215 ;;		line 66 in file "test_61f02x_SPI.C"
   216 ;; Parameters:    Size  Location     Type
   217 ;;		None
   218 ;; Auto vars:     Size  Location     Type
   219 ;;		None
   220 ;; Return value:  Size  Location     Type
   221 ;;                  1    wreg      void 
   222 ;; Registers used:
   223 ;;		None
   224 ;; Tracked objects:
   225 ;;		On entry : B00/0
   226 ;;		On exit  : B00/0
   227 ;;		Unchanged: 800/0
   228 ;; Data sizes:     COMMON   BANK0   BANK1
   229 ;;      Params:         0       0       0
   230 ;;      Locals:         0       0       0
   231 ;;      Temps:          0       0       0
   232 ;;      Totals:         0       0       0
   233 ;;Total ram usage:        0 bytes
   234 ;; Hardware stack levels used:    1
   235 ;; This function calls:
   236 ;;		Nothing
   237 ;; This function is called by:
   238 ;;		_main
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           
   243                           ;psect for function _init_25c64_io
   244  077D                     _init_25c64_io:	
   245                           
   246                           ;test_61f02x_SPI.C: 68: PA7 = 1;
   247                           
   248                           ;incstack = 0
   249                           ; Regs used in _init_25c64_io: []
   250  077D  1785               	bsf	5,7	;volatile
   251                           
   252                           ;test_61f02x_SPI.C: 69: PA6 = 0;
   253  077E  1305               	bcf	5,6	;volatile
   254                           
   255                           ;test_61f02x_SPI.C: 70: PA2 = 0;
   256  077F  1105               	bcf	5,2	;volatile
   257  0780  0008               	return
   258  0781                     __end_of_init_25c64_io:	
   259                           
   260                           	psect	text2
   261  07B2                     __ptext2:	
   262 ;; *************** function _SPI_Write *****************
   263 ;; Defined at:
   264 ;;		line 171 in file "test_61f02x_SPI.C"
   265 ;; Parameters:    Size  Location     Type
   266 ;;  addr            2    3[COMMON] unsigned int 
   267 ;;  dat             1    5[COMMON] unsigned char 
   268 ;; Auto vars:     Size  Location     Type
   269 ;;		None
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, status,2, status,0, pclath, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : 300/0
   276 ;;		On exit  : 300/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMMON   BANK0   BANK1
   279 ;;      Params:         3       0       0
   280 ;;      Locals:         0       0       0
   281 ;;      Temps:          0       0       0
   282 ;;      Totals:         3       0       0
   283 ;;Total ram usage:        3 bytes
   284 ;; Hardware stack levels used:    1
   285 ;; Hardware stack levels required when called:    2
   286 ;; This function calls:
   287 ;;		_SPI_RW
   288 ;;		_SPI_ReadStatus
   289 ;;		_WriteDisable
   290 ;;		_WriteEnable
   291 ;; This function is called by:
   292 ;;		_main
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           
   297                           ;psect for function _SPI_Write
   298  07B2                     _SPI_Write:	
   299  07B2                     l1604:	
   300                           ;test_61f02x_SPI.C: 173: while(SPI_ReadStatus()&0x01);
   301                           
   302                           ;incstack = 0
   303                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
   304                           
   305  07B2  278B               	fcall	_SPI_ReadStatus
   306  07B3  3901               	andlw	1
   307  07B4  1D03               	btfss	3,2
   308  07B5  2FB2               	goto	l1604
   309                           
   310                           ;test_61f02x_SPI.C: 174: WriteEnable();
   311  07B6  2786               	fcall	_WriteEnable
   312                           
   313                           ;test_61f02x_SPI.C: 175: PA7=0;
   314  07B7  1385               	bcf	5,7	;volatile
   315                           
   316                           ;test_61f02x_SPI.C: 176: SPI_RW(0x02);
   317  07B8  3002               	movlw	2
   318  07B9  27DE               	fcall	_SPI_RW
   319                           
   320                           ;test_61f02x_SPI.C: 177: SPI_RW((unsigned char)((addr)>>8));
   321  07BA  0874               	movf	SPI_Write@addr+1,w
   322  07BB  27DE               	fcall	_SPI_RW
   323                           
   324                           ;test_61f02x_SPI.C: 178: SPI_RW((unsigned char)addr);
   325  07BC  0873               	movf	SPI_Write@addr,w
   326  07BD  27DE               	fcall	_SPI_RW
   327                           
   328                           ;test_61f02x_SPI.C: 180: SPI_RW(dat);
   329  07BE  0875               	movf	SPI_Write@dat,w
   330  07BF  27DE               	fcall	_SPI_RW
   331                           
   332                           ;test_61f02x_SPI.C: 181: PA7=1;
   333  07C0  1785               	bsf	5,7	;volatile
   334                           
   335                           ;test_61f02x_SPI.C: 182: WriteDisable();
   336  07C1  2781               	fcall	_WriteDisable
   337  07C2                     l1612:	
   338                           ;test_61f02x_SPI.C: 183: while(SPI_ReadStatus()&0x01);
   339                           
   340  07C2  278B               	fcall	_SPI_ReadStatus
   341  07C3  3901               	andlw	1
   342  07C4  1903               	btfsc	3,2
   343  07C5  0008               	return
   344  07C6  2FC2               	goto	l1612
   345  07C7                     __end_of_SPI_Write:	
   346                           
   347                           	psect	text3
   348  0786                     __ptext3:	
   349 ;; *************** function _WriteEnable *****************
   350 ;; Defined at:
   351 ;;		line 104 in file "test_61f02x_SPI.C"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, status,2, status,0, pclath, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 300/0
   362 ;;		On exit  : 300/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1
   365 ;;      Params:         0       0       0
   366 ;;      Locals:         0       0       0
   367 ;;      Temps:          0       0       0
   368 ;;      Totals:         0       0       0
   369 ;;Total ram usage:        0 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; Hardware stack levels required when called:    1
   372 ;; This function calls:
   373 ;;		_SPI_RW
   374 ;; This function is called by:
   375 ;;		_SPI_Write
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           
   380                           ;psect for function _WriteEnable
   381  0786                     _WriteEnable:	
   382                           
   383                           ;test_61f02x_SPI.C: 106: PA7=0;
   384                           
   385                           ;incstack = 0
   386                           ; Regs used in _WriteEnable: [wreg+status,2+status,0+pclath+cstack]
   387  0786  1385               	bcf	5,7	;volatile
   388                           
   389                           ;test_61f02x_SPI.C: 107: SPI_RW(0x06);
   390  0787  3006               	movlw	6
   391  0788  27DE               	fcall	_SPI_RW
   392                           
   393                           ;test_61f02x_SPI.C: 108: PA7=1;
   394  0789  1785               	bsf	5,7	;volatile
   395  078A  0008               	return
   396  078B                     __end_of_WriteEnable:	
   397                           
   398                           	psect	text4
   399  0781                     __ptext4:	
   400 ;; *************** function _WriteDisable *****************
   401 ;; Defined at:
   402 ;;		line 114 in file "test_61f02x_SPI.C"
   403 ;; Parameters:    Size  Location     Type
   404 ;;		None
   405 ;; Auto vars:     Size  Location     Type
   406 ;;		None
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      void 
   409 ;; Registers used:
   410 ;;		wreg, status,2, status,0, pclath, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 300/0
   413 ;;		On exit  : 300/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMMON   BANK0   BANK1
   416 ;;      Params:         0       0       0
   417 ;;      Locals:         0       0       0
   418 ;;      Temps:          0       0       0
   419 ;;      Totals:         0       0       0
   420 ;;Total ram usage:        0 bytes
   421 ;; Hardware stack levels used:    1
   422 ;; Hardware stack levels required when called:    1
   423 ;; This function calls:
   424 ;;		_SPI_RW
   425 ;; This function is called by:
   426 ;;		_SPI_Write
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           
   431                           ;psect for function _WriteDisable
   432  0781                     _WriteDisable:	
   433                           
   434                           ;test_61f02x_SPI.C: 116: PA7=0;
   435                           
   436                           ;incstack = 0
   437                           ; Regs used in _WriteDisable: [wreg+status,2+status,0+pclath+cstack]
   438  0781  1385               	bcf	5,7	;volatile
   439                           
   440                           ;test_61f02x_SPI.C: 117: SPI_RW(0x04);
   441  0782  3004               	movlw	4
   442  0783  27DE               	fcall	_SPI_RW
   443                           
   444                           ;test_61f02x_SPI.C: 118: PA7=1;
   445  0784  1785               	bsf	5,7	;volatile
   446  0785  0008               	return
   447  0786                     __end_of_WriteDisable:	
   448                           
   449                           	psect	text5
   450  07A2                     __ptext5:	
   451 ;; *************** function _SPI_Read *****************
   452 ;; Defined at:
   453 ;;		line 154 in file "test_61f02x_SPI.C"
   454 ;; Parameters:    Size  Location     Type
   455 ;;  addr            2    3[COMMON] unsigned int 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  spidata         1    5[COMMON] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      unsigned char 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : B00/0
   464 ;;		On exit  : 300/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1
   467 ;;      Params:         2       0       0
   468 ;;      Locals:         1       0       0
   469 ;;      Temps:          0       0       0
   470 ;;      Totals:         3       0       0
   471 ;;Total ram usage:        3 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    2
   474 ;; This function calls:
   475 ;;		_SPI_RW
   476 ;;		_SPI_ReadStatus
   477 ;; This function is called by:
   478 ;;		_main
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           
   483                           ;psect for function _SPI_Read
   484  07A2                     _SPI_Read:	
   485  07A2                     l1592:	
   486                           ;test_61f02x_SPI.C: 156: unsigned char spidata;
   487                           ;test_61f02x_SPI.C: 157: while(SPI_ReadStatus()&0x01);
   488                           
   489                           ;incstack = 0
   490                           ; Regs used in _SPI_Read: [wreg+status,2+status,0+pclath+cstack]
   491                           
   492  07A2  278B               	fcall	_SPI_ReadStatus
   493  07A3  3901               	andlw	1
   494  07A4  1D03               	btfss	3,2
   495  07A5  2FA2               	goto	l1592
   496                           
   497                           ;test_61f02x_SPI.C: 158: PA7=0;
   498  07A6  1385               	bcf	5,7	;volatile
   499                           
   500                           ;test_61f02x_SPI.C: 159: SPI_RW(0x03);
   501  07A7  3003               	movlw	3
   502  07A8  27DE               	fcall	_SPI_RW
   503                           
   504                           ;test_61f02x_SPI.C: 160: SPI_RW((unsigned char)((addr)>>8));
   505  07A9  0874               	movf	SPI_Read@addr+1,w
   506  07AA  27DE               	fcall	_SPI_RW
   507                           
   508                           ;test_61f02x_SPI.C: 161: SPI_RW((unsigned char)addr);
   509  07AB  0873               	movf	SPI_Read@addr,w
   510  07AC  27DE               	fcall	_SPI_RW
   511                           
   512                           ;test_61f02x_SPI.C: 162: spidata = SPI_RW(0x00);
   513  07AD  3000               	movlw	0
   514  07AE  27DE               	fcall	_SPI_RW
   515  07AF  00F5               	movwf	SPI_Read@spidata
   516                           
   517                           ;test_61f02x_SPI.C: 163: PA7=1;
   518  07B0  1785               	bsf	5,7	;volatile
   519                           
   520                           ;test_61f02x_SPI.C: 164: return spidata;
   521  07B1  0008               	return
   522  07B2                     __end_of_SPI_Read:	
   523                           
   524                           	psect	text6
   525  078B                     __ptext6:	
   526 ;; *************** function _SPI_ReadStatus *****************
   527 ;; Defined at:
   528 ;;		line 126 in file "test_61f02x_SPI.C"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  status          1    2[COMMON] unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      unsigned char 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 300/0
   539 ;;		On exit  : 300/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1
   542 ;;      Params:         0       0       0
   543 ;;      Locals:         1       0       0
   544 ;;      Temps:          0       0       0
   545 ;;      Totals:         1       0       0
   546 ;;Total ram usage:        1 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    1
   549 ;; This function calls:
   550 ;;		_SPI_RW
   551 ;; This function is called by:
   552 ;;		_SPI_Read
   553 ;;		_SPI_Write
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           
   558                           ;psect for function _SPI_ReadStatus
   559  078B                     _SPI_ReadStatus:	
   560                           
   561                           ;test_61f02x_SPI.C: 129: PA7=0;
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _SPI_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
   565  078B  1385               	bcf	5,7	;volatile
   566                           
   567                           ;test_61f02x_SPI.C: 130: SPI_RW(0x05);
   568  078C  3005               	movlw	5
   569  078D  27DE               	fcall	_SPI_RW
   570                           
   571                           ;test_61f02x_SPI.C: 131: status = SPI_RW(0x00);
   572  078E  3000               	movlw	0
   573  078F  27DE               	fcall	_SPI_RW
   574  0790  00F2               	movwf	SPI_ReadStatus@status
   575                           
   576                           ;test_61f02x_SPI.C: 132: PA7=1;
   577  0791  1785               	bsf	5,7	;volatile
   578                           
   579                           ;test_61f02x_SPI.C: 133: return status;
   580  0792  0008               	return
   581  0793                     __end_of_SPI_ReadStatus:	
   582                           
   583                           	psect	text7
   584  07DE                     __ptext7:	
   585 ;; *************** function _SPI_RW *****************
   586 ;; Defined at:
   587 ;;		line 78 in file "test_61f02x_SPI.C"
   588 ;; Parameters:    Size  Location     Type
   589 ;;  data            1    wreg     unsigned char 
   590 ;; Auto vars:     Size  Location     Type
   591 ;;  data            1    1[COMMON] unsigned char 
   592 ;;  i               1    0[COMMON] unsigned char 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      unsigned char 
   595 ;; Registers used:
   596 ;;		wreg, status,2, status,0
   597 ;; Tracked objects:
   598 ;;		On entry : 300/0
   599 ;;		On exit  : 300/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMMON   BANK0   BANK1
   602 ;;      Params:         0       0       0
   603 ;;      Locals:         2       0       0
   604 ;;      Temps:          0       0       0
   605 ;;      Totals:         2       0       0
   606 ;;Total ram usage:        2 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; This function calls:
   609 ;;		Nothing
   610 ;; This function is called by:
   611 ;;		_WriteEnable
   612 ;;		_WriteDisable
   613 ;;		_SPI_ReadStatus
   614 ;;		_SPI_Read
   615 ;;		_SPI_Write
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _SPI_RW
   621  07DE                     _SPI_RW:	
   622                           
   623                           ;incstack = 0
   624                           ; Regs used in _SPI_RW: [wreg+status,2+status,0]
   625                           ;SPI_RW@data stored from wreg
   626  07DE  00F1               	movwf	SPI_RW@data
   627                           
   628                           ;test_61f02x_SPI.C: 80: unsigned char i;
   629                           ;test_61f02x_SPI.C: 81: for(i=0;i<8;i++)
   630  07DF  01F0               	clrf	SPI_RW@i
   631  07E0                     l1075:	
   632                           
   633                           ;test_61f02x_SPI.C: 82: {
   634                           ;test_61f02x_SPI.C: 83: if(data&0x80)
   635  07E0  1FF1               	btfss	SPI_RW@data,7
   636  07E1  2FE4               	goto	l1077
   637                           
   638                           ;test_61f02x_SPI.C: 84: PA2 = 1;
   639  07E2  1505               	bsf	5,2	;volatile
   640  07E3  2FE5               	goto	l1078
   641  07E4                     l1077:	
   642                           
   643                           ;test_61f02x_SPI.C: 85: else
   644                           ;test_61f02x_SPI.C: 86: PA2 = 0;
   645  07E4  1105               	bcf	5,2	;volatile
   646  07E5                     l1078:	
   647                           
   648                           ;test_61f02x_SPI.C: 87: __nop();
   649  07E5  0000               	nop
   650                           
   651                           ;test_61f02x_SPI.C: 88: data<<=1;
   652  07E6  1003               	clrc
   653  07E7  0DF1               	rlf	SPI_RW@data,f
   654                           
   655                           ;test_61f02x_SPI.C: 89: PA6 = 1;
   656  07E8  1283               	bcf	3,5	;RP0=0, select bank0
   657  07E9  1303               	bcf	3,6	;RP1=0, select bank0
   658  07EA  1705               	bsf	5,6	;volatile
   659                           
   660                           ;test_61f02x_SPI.C: 90: __nop();
   661  07EB  0000               	nop
   662                           
   663                           ;test_61f02x_SPI.C: 91: if(PA4)
   664  07EC  1283               	bcf	3,5	;RP0=0, select bank0
   665  07ED  1303               	bcf	3,6	;RP1=0, select bank0
   666  07EE  1E05               	btfss	5,4	;volatile
   667  07EF  2FF2               	goto	l1079
   668                           
   669                           ;test_61f02x_SPI.C: 92: data |= 0x01;
   670  07F0  1471               	bsf	SPI_RW@data,0
   671  07F1  2FF3               	goto	l1080
   672  07F2                     l1079:	
   673                           
   674                           ;test_61f02x_SPI.C: 93: else
   675                           ;test_61f02x_SPI.C: 94: data &= 0xFE;
   676  07F2  1071               	bcf	SPI_RW@data,0
   677  07F3                     l1080:	
   678                           
   679                           ;test_61f02x_SPI.C: 95: __nop();
   680  07F3  0000               	nop
   681                           
   682                           ;test_61f02x_SPI.C: 96: PA6 = 0;
   683  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   684  07F5  1303               	bcf	3,6	;RP1=0, select bank0
   685  07F6  1305               	bcf	5,6	;volatile
   686  07F7  3008               	movlw	8
   687  07F8  0AF0               	incf	SPI_RW@i,f
   688  07F9  0270               	subwf	SPI_RW@i,w
   689  07FA  1C03               	skipc
   690  07FB  2FE0               	goto	l1075
   691                           
   692                           ;test_61f02x_SPI.C: 97: }
   693                           ;test_61f02x_SPI.C: 98: return data;
   694  07FC  0871               	movf	SPI_RW@data,w
   695  07FD  0008               	return
   696  07FE                     __end_of_SPI_RW:	
   697                           
   698                           	psect	text8
   699  07C7                     __ptext8:	
   700 ;; *************** function _POWER_INITIAL *****************
   701 ;; Defined at:
   702 ;;		line 39 in file "test_61f02x_SPI.C"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2
   711 ;; Tracked objects:
   712 ;;		On entry : B00/0
   713 ;;		On exit  : B00/0
   714 ;;		Unchanged: 800/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1
   716 ;;      Params:         0       0       0
   717 ;;      Locals:         0       0       0
   718 ;;      Temps:          0       0       0
   719 ;;      Totals:         0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _POWER_INITIAL
   731  07C7                     _POWER_INITIAL:	
   732                           
   733                           ;test_61f02x_SPI.C: 41: OSCCON = 0B01110001;
   734                           
   735                           ;incstack = 0
   736                           ; Regs used in _POWER_INITIAL: [wreg+status,2]
   737  07C7  3071               	movlw	113
   738  07C8  1683               	bsf	3,5	;RP0=1, select bank1
   739  07C9  008F               	movwf	15	;volatile
   740                           
   741                           ;test_61f02x_SPI.C: 42: INTCON = 0;
   742  07CA  018B               	clrf	11	;volatile
   743                           
   744                           ;test_61f02x_SPI.C: 44: PORTA = 0B00000000;
   745  07CB  1283               	bcf	3,5	;RP0=0, select bank0
   746  07CC  0185               	clrf	5	;volatile
   747                           
   748                           ;test_61f02x_SPI.C: 45: TRISA = 0B00010000;
   749  07CD  3010               	movlw	16
   750  07CE  1683               	bsf	3,5	;RP0=1, select bank1
   751  07CF  0085               	movwf	5	;volatile
   752                           
   753                           ;test_61f02x_SPI.C: 46: PORTC = 0B00000000;
   754  07D0  1283               	bcf	3,5	;RP0=0, select bank0
   755  07D1  0187               	clrf	7	;volatile
   756                           
   757                           ;test_61f02x_SPI.C: 47: TRISC = 0B00000000;
   758  07D2  1683               	bsf	3,5	;RP0=1, select bank1
   759  07D3  0187               	clrf	7	;volatile
   760                           
   761                           ;test_61f02x_SPI.C: 48: WPUA = 0B00010000;
   762  07D4  0095               	movwf	21	;volatile
   763                           
   764                           ;test_61f02x_SPI.C: 49: WPUC = 0B00000000;
   765  07D5  0188               	clrf	8	;volatile
   766                           
   767                           ;test_61f02x_SPI.C: 51: ANSEL = 0B00000000;
   768  07D6  0191               	clrf	17	;volatile
   769                           
   770                           ;test_61f02x_SPI.C: 52: OPTION = 0B00001000;
   771  07D7  3008               	movlw	8
   772  07D8  0081               	movwf	1	;volatile
   773                           
   774                           ;test_61f02x_SPI.C: 53: MSCKCON = 0B00000000;
   775  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   776  07DA  019B               	clrf	27	;volatile
   777                           
   778                           ;test_61f02x_SPI.C: 57: CMCON0 = 0B00000111;
   779  07DB  3007               	movlw	7
   780  07DC  0099               	movwf	25	;volatile
   781  07DD  0008               	return
   782  07DE                     __end_of_POWER_INITIAL:	
   783  007E                     btemp	set	126	;btemp
   784  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       7
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SPI_Read
    _main->_SPI_Write
    _SPI_Write->_SPI_ReadStatus
    _WriteEnable->_SPI_RW
    _WriteDisable->_SPI_RW
    _SPI_Read->_SPI_ReadStatus
    _SPI_ReadStatus->_SPI_RW

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     654
                      _POWER_INITIAL
                           _SPI_Read
                          _SPI_Write
                      _init_25c64_io
 ---------------------------------------------------------------------------------
 (1) _init_25c64_io                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Write                                            3     0      3     408
                                              3 COMMON     3     0      3
                             _SPI_RW
                     _SPI_ReadStatus
                       _WriteDisable
                        _WriteEnable
 ---------------------------------------------------------------------------------
 (2) _WriteEnable                                          0     0      0      60
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (2) _WriteDisable                                         0     0      0      60
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (1) _SPI_Read                                             3     1      2     246
                                              3 COMMON     3     1      2
                             _SPI_RW
                     _SPI_ReadStatus
 ---------------------------------------------------------------------------------
 (2) _SPI_ReadStatus                                       1     1      0      75
                                              2 COMMON     1     1      0
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (3) _SPI_RW                                               2     2      0      60
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _POWER_INITIAL
   _SPI_Read
     _SPI_RW
     _SPI_ReadStatus
       _SPI_RW
   _SPI_Write
     _SPI_RW
     _SPI_ReadStatus
       _SPI_RW
     _WriteDisable
       _SPI_RW
     _WriteEnable
       _SPI_RW
   _init_25c64_io

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0       7       7        0.0%
DATA                 0      0       7       8        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Thu Nov 11 16:19:32 2021

 __size_of_init_25c64_io 0004     __size_of_WriteEnable 0005                      _PA2 002A  
                    _PA4 002C                      _PA6 002E                      _PA7 002F  
  __size_of_WriteDisable 0005                     l1080 07F3                     l1075 07E0  
                   l1077 07E4                     l1078 07E5                     l1079 07F2  
                   l1612 07C2                     l1604 07B2                     l1622 07A0  
                   l1592 07A2          SPI_Read@spidata 0075                     _WPUA 0095  
                   _WPUC 0088                     _main 0793                     btemp 007E  
                   start 0000   __end_of_SPI_ReadStatus 0793             _WriteDisable 0781  
                  ?_main 0070                    _ANSEL 0091                    _PORTA 0005  
                  _PORTC 0007                    _TRISA 0085                    _TRISC 0087  
          _init_25c64_io 077D         __end_of_SPI_Read 07B2                    status 0003  
                  wtemp0 007E       __size_of_SPI_Write 0015          ?_SPI_ReadStatus 0070  
           SPI_Read@addr 0073          __initialization 07FE             __end_of_main 07A2  
                 ??_main 0076           ?_init_25c64_io 0070                   _CMCON0 0019  
                 _INTCON 000B                   _OSCCON 008F                   _OPTION 0081  
                 _SPI_RW 07DE             SPI_Write@dat 0075        __end_of_SPI_Write 07C7  
  __end_of_POWER_INITIAL 07DE  __end_of__initialization 07FE           __pcstackCOMMON 0070  
              ?_SPI_Read 0073          ??_init_25c64_io 0070                  ?_SPI_RW 0070  
             __pnvCOMMON 0076               __pmaintext 0793            ??_WriteEnable 0072  
                SPI_RW@i 0070               ??_SPI_Read 0075                  _MSCKCON 001B  
       ??_SPI_ReadStatus 0072          __size_of_SPI_RW 0020            SPI_Write@addr 0073  
                __ptext1 077D                  __ptext2 07B2                  __ptext3 0786  
                __ptext4 0781                  __ptext5 07A2                  __ptext6 078B  
                __ptext7 07DE                  __ptext8 07C7      __end_of_WriteEnable 078B  
   end_of_initialization 07FE                _SPI_Write 07B2           __end_of_SPI_RW 07FE  
            _WriteEnable 0786        __size_of_SPI_Read 0010      start_initialization 07FE  
             ?_SPI_Write 0073                 ??_SPI_RW 0070            ?_WriteDisable 0070  
 __size_of_POWER_INITIAL 0017                ___latbits 0000    __end_of_init_25c64_io 0781  
         ??_WriteDisable 0072     SPI_ReadStatus@status 0072              ??_SPI_Write 0076  
          _POWER_INITIAL 07C7                 _SPI_Read 07A2               SPI_RW@data 0071  
         ?_POWER_INITIAL 0070  __size_of_SPI_ReadStatus 0008             ?_WriteEnable 0070  
   __end_of_WriteDisable 0786            __size_of_main 000F          ??_POWER_INITIAL 0070  
            _SPIReadData 0076           _SPI_ReadStatus 078B  
