C51 COMPILER V9.02   UART                                                                  11/21/2021 21:09:55 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\uart.c OMF2 BROWSE DEBUG PRINT(.\lst\uart.lst) OBJECT(.\output\uart.
                    -obj)

line level    source

   1          #ifndef _UART_C_
   2          #define _UART_C_
   3          #include "include/ca51f_config.h"
   4          #include "include/ca51f3sfr.h"
   5          #include "include/ca51f3xsfr.h"
   6          #include "include/gpiodef_f3.h"
   7          
   8          #include "include/uart.h"
   9          #include <intrins.h>
  10          #include <string.h>
  11          #include <stdarg.h>
  12          #include <stdlib.h>
  13          #include <stdio.h>
  14          #include <absacc.h>
  15          /*********************************************************************************************************
             -************/
  16          /*********************************************************************************************************
             -************/
  17          void Uart1_Initial(unsigned long int baudrate)
  18          {
  19   1              unsigned int value_temp;
  20   1      
  21   1              uart1_send.head=0;
  22   1              uart1_send.tail=0;
  23   1              uart1_rev.head=0;
  24   1              uart1_rev.tail=0;
  25   1              uart1_tx_flag=0;
  26   1      
  27   1              value_temp = 0x400 - FOSC/(baudrate*32);
  28   1      
  29   1      
  30   1              P12F = P12_UART1_RX_SETTING;
  31   1              P11F = P11_UART1_TX_SETTING;
  32   1      
  33   1      
  34   1              S1RELH = (unsigned char)(value_temp>>8);
  35   1              S1RELL = (unsigned char)(value_temp);
  36   1              
  37   1              S1CON = 0xD0;
  38   1              ES1 =   1;      
  39   1      }
  40          void Uart1_PutChar(unsigned char bdat)
  41          {
  42   1              unsigned char free_space;
  43   1              unsigned char tail_tmp;
  44   1              while(1)
  45   1              {               
  46   2                      tail_tmp = uart1_send.tail;
  47   2                      if(uart1_send.head < tail_tmp)
  48   2                      {
  49   3                              free_space = tail_tmp - uart1_send.head;
  50   3                      }
  51   2                      else
  52   2                      {
C51 COMPILER V9.02   UART                                                                  11/21/2021 21:09:55 PAGE 2   

  53   3                              free_space = UART1_TX_BUF_SIZE + tail_tmp - uart1_send.head;
  54   3                      }               
  55   2                      if(free_space > 1)
  56   2                      {
  57   3                              ES1 = 0; 
  58   3                              uart1_send.head++;
  59   3                              uart1_send.head %= UART1_TX_BUF_SIZE;
  60   3                              uart1_tx_buf[uart1_send.head] = bdat;
  61   3                              if(!uart1_tx_flag)
  62   3                              {
  63   4                                      ES1 = 1;
  64   4                                      uart1_send.tail++;
  65   4                                      uart1_send.tail %= UART1_TX_BUF_SIZE;           
  66   4                                      S1BUF = uart1_tx_buf[uart1_send.tail];                          
  67   4                                      uart1_tx_flag = 1;              
  68   4                              }
  69   3                              else
  70   3                              {
  71   4                                      ES1 = 1;        
  72   4                              }                       
  73   3                              break;
  74   3                      }
  75   2              }
  76   1      }
  77          void UART1_ISR (void) interrupt 6       
  78          {
  79   1              if(S1CON & 0x01)
  80   1              {
  81   2                      S1CON = (S1CON&0xFC)|0x01;                       
  82   2                      uart1_rev.head++;
  83   2                      uart1_rev.head %= UART1_RX_BUF_SIZE;
  84   2                      uart1_rx_buf[uart1_rev.head]=S1BUF;
  85   2              }
  86   1              if(S1CON & 0x02)
  87   1              {
  88   2                      S1CON = (S1CON&0xFC)|0x02;      
  89   2                      if(uart1_send.head!=uart1_send.tail)
  90   2                      {
  91   3                              uart1_send.tail++;
  92   3                              uart1_send.tail %= UART1_TX_BUF_SIZE;
  93   3                              S1BUF=uart1_tx_buf[uart1_send.tail];                            
  94   3                      }
  95   2                      else
  96   2                      {
  97   3                              uart1_tx_flag=0;
  98   3                      }               
  99   2              }
 100   1      }
 101          
 102          void UartPutStr(char *str)
 103          {
 104   1              while(*str)
 105   1              {       
 106   2                      Uart1_PutChar(*str++);
 107   2              }
 108   1      }
 109          void uart_printf(char *fmt,...) 
 110          {
 111   1          va_list ap;
 112   1          char xdata string[256];
 113   1          va_start(ap,fmt);
 114   1          vsprintf(string,fmt,ap);
C51 COMPILER V9.02   UART                                                                  11/21/2021 21:09:55 PAGE 3   

 115   1          UartPutStr(string);
 116   1          va_end(ap);
 117   1      }
 118          /*********************************************************************************************************
             -************/
 119          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    403    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    124     256
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
