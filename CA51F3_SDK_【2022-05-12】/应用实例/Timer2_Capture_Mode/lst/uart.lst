C51 COMPILER V9.02   UART                                                                  05/11/2022 23:40:36 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\uart.c OMF2 BROWSE DEBUG PRINT(.\lst\uart.lst) OBJECT(.\output\uart.
                    -obj)

line level    source

   1          #ifndef _UART_C_
   2          #define _UART_C_
   3          #include "include/ca51f_config.h"
   4          #include "include/ca51f3sfr.h"
   5          #include "include/ca51f3xsfr.h"
   6          #include "include/gpiodef_f3.h"
   7          
   8          #include "include/uart.h"
   9          #include <intrins.h>
  10          #include <string.h>
  11          #include <stdarg.h>
  12          #include <stdlib.h>
  13          #include <stdio.h>
  14          #include <absacc.h>
  15          /*********************************************************************************************************
             -************/
  16          /*********************************************************************************************************
             -************/
  17          #ifdef UART0_EN
              void Uart0_Initial_Timer1(unsigned long int baudrate)
              {       
                      P31F = P31_UART0_RX_SETTING;
                      P30F = P30_UART0_TX_SETTING;
                      
                      uart0_send.head=0;
                      uart0_send.tail=0;
                      uart0_rev.head=0;
                      uart0_rev.tail=0;
                      uart0_tx_flag=0;
              
              /*********************************************************************************************************
             -***************/
              //TIMER1作为UART0的波特率发生器
                      TMOD = (TMOD&0xCF)|0x20;
                      TH1 = (unsigned char)(0x100 - FOSC/(baudrate*32*6));                    
                      TL1 = TH1;
                      ET1=0;
                      TR1=1;          
                      PCON |= 0x80;                   //波特率倍速
              /*********************************************************************************************************
             -***************/
              
                      S0CON = 0x50;    
                      ES0 = 1;
              }
              
              void Uart0_PutChar(unsigned char bdat)
              {
                      unsigned char free_space;
                      unsigned char tail_tmp;
                      while(1)
                      {                               
                              tail_tmp = uart0_send.tail;     
                              if(uart0_send.head < tail_tmp)
C51 COMPILER V9.02   UART                                                                  05/11/2022 23:40:36 PAGE 2   

                              {
                                      free_space = tail_tmp - uart0_send.head;
                              }
                              else
                              {
                                      free_space = UART0_TX_BUF_SIZE + tail_tmp - uart0_send.head;
                              }               
                              if(free_space > 1)
                              {
                                      ES0 = 0; 
                                      uart0_send.head++;
                                      uart0_send.head %= UART0_TX_BUF_SIZE;
                                      uart0_tx_buf[uart0_send.head] = bdat;                   
                                      if(!uart0_tx_flag)
                                      {
                                              ES0 = 1;                                
                                              uart0_send.tail++;
                                              uart0_send.tail %= UART0_TX_BUF_SIZE;           
                                              S0BUF=uart0_tx_buf[uart0_send.tail];                            
                                              uart0_tx_flag = 1;              
                                      }
                                      else
                                      {
                                              ES0 = 1;        
                                      }                       
                                      break;
                              }
                      }
              }
              void UART0_ISR (void) interrupt 4
              {       
                      if(RI0)
                      {
                              RI0 = 0;
                              uart0_rev.head++;
                              uart0_rev.head %= UART0_RX_BUF_SIZE;
                              uart0_rx_buf[uart0_rev.head]=S0BUF;
                      }
                      if(TI0)
                      {       
                              TI0 = 0;                
                              if(uart0_send.head!=uart0_send.tail)
                              {
                                      uart0_send.tail++;
                                      uart0_send.tail %= UART0_TX_BUF_SIZE;
                                      S0BUF=uart0_tx_buf[uart0_send.tail];                            
                              }
                              else
                              {
                                      uart0_tx_flag=0;
                              }       
                      }
              }
              #endif
 105          #ifdef UART1_EN
              void Uart1_Initial(unsigned long int baudrate)
              {
                      unsigned int value_temp;
              
                      uart1_send.head=0;
                      uart1_send.tail=0;
                      uart1_rev.head=0;
C51 COMPILER V9.02   UART                                                                  05/11/2022 23:40:36 PAGE 3   

                      uart1_rev.tail=0;
                      uart1_tx_flag=0;
              
                      value_temp = 0x400 - FOSC/(baudrate*32);
              
              
                      P12F = P12_UART1_RX_SETTING;
                      P11F = P11_UART1_TX_SETTING;
              
              
                      S1RELH = (unsigned char)(value_temp>>8);
                      S1RELL = (unsigned char)(value_temp);
                      
                      S1CON = 0xD0;
                      ES1 =   1;      
              }
              void Uart1_PutChar(unsigned char bdat)
              {
                      unsigned char free_space;
                      unsigned char tail_tmp;
                      while(1)
                      {               
                              tail_tmp = uart1_send.tail;
                              if(uart1_send.head < tail_tmp)
                              {
                                      free_space = tail_tmp - uart1_send.head;
                              }
                              else
                              {
                                      free_space = UART1_TX_BUF_SIZE + tail_tmp - uart1_send.head;
                              }               
                              if(free_space > 1)
                              {
                                      ES1 = 0; 
                                      uart1_send.head++;
                                      uart1_send.head %= UART1_TX_BUF_SIZE;
                                      uart1_tx_buf[uart1_send.head] = bdat;
                                      if(!uart1_tx_flag)
                                      {
                                              ES1 = 1;
                                              uart1_send.tail++;
                                              uart1_send.tail %= UART1_TX_BUF_SIZE;           
                                              S1BUF = uart1_tx_buf[uart1_send.tail];                          
                                              uart1_tx_flag = 1;              
                                      }
                                      else
                                      {
                                              ES1 = 1;        
                                      }                       
                                      break;
                              }
                      }
              }
              void UART1_ISR (void) interrupt 6       
              {
                      if(S1CON & 0x01)
                      {
                              S1CON = (S1CON&0xFC)|0x01;                       
                              uart1_rev.head++;
                        uart1_rev.head %= UART1_RX_BUF_SIZE;
                              uart1_rx_buf[uart1_rev.head]=S1BUF;
                      }
C51 COMPILER V9.02   UART                                                                  05/11/2022 23:40:36 PAGE 4   

                      if(S1CON & 0x02)
                      {
                              S1CON = (S1CON&0xFC)|0x02;                      
                              if(uart1_send.head!=uart1_send.tail)
                              {
                                      uart1_send.tail++;
                                      uart1_send.tail %= UART1_TX_BUF_SIZE;
                                      S1BUF=uart1_tx_buf[uart1_send.tail];                            
                              }
                              else
                              {
                                      uart1_tx_flag=0;
                              }               
                      }
              }
              #endif
 191          
 192          #ifdef PRINT_EN
                      #ifdef UART0_PRINT
                              #define Uart_PutChar    Uart0_PutChar
                      #elif defined  UART1_PRINT
                              #define Uart_PutChar    Uart1_PutChar
                      #endif
              void UartPutStr(char *str)
              {
                      while(*str)
                      {       
                              Uart_PutChar(*str++);
                      }
              }
              void uart_printf(char *fmt,...) 
              {
                  va_list ap;
                  char xdata string[256];
                  va_start(ap,fmt);
                  vsprintf(string,fmt,ap);
                  UartPutStr(string);
                  va_end(ap);
              }
              #endif
 215          /*********************************************************************************************************
             -************/
 216          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
